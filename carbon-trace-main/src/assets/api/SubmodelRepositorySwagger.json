{
  "openapi": "3.0.3",
  "info": {
    "title": "DotAAS Part 2 | HTTP/REST | Submodel Repository Service Specification",
    "description": "The entire Submodel Repository Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).  \nPublisher: Industrial Digital Twin Association (IDTA) 2023",
    "contact": {
      "name": "Industrial Digital Twin Association (IDTA)",
      "email": "info@idtwin.org"
    },
    "license": {
      "name": "CC BY 4.0",
      "url": "https://creativecommons.org/licenses/by/4.0/"
    },
    "version": "V3.0.1_SSP-001"
  },
  "servers": [
    {
      "url": "{protocol}://{host_name}:{port}/api/{version_prefix}",
      "variables": {
        "protocol": {
          "description": "Allows access through http and https (recommended)",
          "default": "https",
          "enum": [
            "http",
            "https"
          ]
        },
        "host_name": {
          "description": "Hostname of server hosting the api",
          "default": "admin-shell.io"
        },
        "port": {
          "description": "80 is default for http, 443 for https",
          "default": "443",
          "enum": [
            "80",
            "443"
          ]
        },
        "version_prefix": {
          "default": "v3.0",
          "enum": [
            "v3.0"
          ]
        }
      }
    }
  ],
  "paths": {
    "/submodels": {
      "get": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Returns all Submodels",
        "operationId": "GetAllSubmodels",
        "parameters": [
          {
            "name": "semanticId",
            "in": "query",
            "description": "The value of the semantic id reference (BASE64-URL-encoded)",
            "schema": {
              "maxLength": 3072,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "idShort",
            "in": "query",
            "description": "The Asset Administration Shell’s IdShort",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements in the response array",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "level",
            "in": "query",
            "description": "Determines the structural depth of the respective resource content",
            "required": false,
            "schema": {
              "type": "string",
              "default": "deep",
              "enum": [
                "deep",
                "core"
              ]
            }
          },
          {
            "name": "extent",
            "in": "query",
            "description": "Determines to which extent the resource is being serialized",
            "required": false,
            "schema": {
              "type": "string",
              "default": "withoutBlobValue",
              "enum": [
                "withBlobValue",
                "withoutBlobValue"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested Submodels",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSubmodelsResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/GetAllSubmodels/3/0",
          "https://admin-shell.io/aas/API/GetAllSubmodelsBySemanticId/3/0",
          "https://admin-shell.io/aas/API/GetAllSubmodelsByIdShort/3/0"
        ]
      },
      "post": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Creates a new Submodel",
        "operationId": "PostSubmodel",
        "requestBody": {
          "description": "Submodel object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Submodel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Submodel created successfully",
            "headers": {
              "Location": {
                "description": "URL of the newly created resource",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Submodel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "409": {
            "description": "Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/PostSubmodel/3/0"
        ]
      }
    },
    "/submodels/$metadata": {
      "get": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Returns the metadata attributes of all Submodels",
        "operationId": "GetAllSubmodels-Metadata",
        "parameters": [
          {
            "name": "semanticId",
            "in": "query",
            "description": "The value of the semantic id reference (BASE64-URL-encoded)",
            "schema": {
              "maxLength": 3072,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "idShort",
            "in": "query",
            "description": "The Asset Administration Shell’s IdShort",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements in the response array",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "level",
            "in": "query",
            "description": "Determines the structural depth of the respective resource content",
            "required": false,
            "schema": {
              "type": "string",
              "default": "deep",
              "enum": [
                "deep",
                "core"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested Submodels",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSubmodelsMetadataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/GetAllSubmodels/3/0",
          "https://admin-shell.io/aas/API/GetAllSubmodelsBySemanticId/3/0",
          "https://admin-shell.io/aas/API/GetAllSubmodelsByIdShort/3/0"
        ]
      }
    },
    "/submodels/$value": {
      "get": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Returns all Submodels in their ValueOnly representation",
        "operationId": "GetAllSubmodels-ValueOnly",
        "parameters": [
          {
            "name": "semanticId",
            "in": "query",
            "description": "The value of the semantic id reference (BASE64-URL-encoded)",
            "schema": {
              "maxLength": 3072,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "idShort",
            "in": "query",
            "description": "The Asset Administration Shell’s IdShort",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements in the response array",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "level",
            "in": "query",
            "description": "Determines the structural depth of the respective resource content",
            "required": false,
            "schema": {
              "type": "string",
              "default": "deep",
              "enum": [
                "deep",
                "core"
              ]
            }
          },
          {
            "name": "extent",
            "in": "query",
            "description": "Determines to which extent the resource is being serialized",
            "required": false,
            "schema": {
              "type": "string",
              "default": "withoutBlobValue",
              "enum": [
                "withBlobValue",
                "withoutBlobValue"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested Submodels",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSubmodelsValueResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/GetAllSubmodels/3/0",
          "https://admin-shell.io/aas/API/GetAllSubmodelsBySemanticId/3/0",
          "https://admin-shell.io/aas/API/GetAllSubmodelsByIdShort/3/0"
        ]
      }
    },
    "/submodels/$reference": {
      "get": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Returns the References for all Submodels",
        "operationId": "GetAllSubmodels-Reference",
        "parameters": [
          {
            "name": "semanticId",
            "in": "query",
            "description": "The value of the semantic id reference (BASE64-URL-encoded)",
            "schema": {
              "maxLength": 3072,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "idShort",
            "in": "query",
            "description": "The Asset Administration Shell’s IdShort",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements in the response array",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "level",
            "in": "query",
            "description": "Determines the structural depth of the respective resource content",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "core",
              "enum": [
                "core"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "References of the requested Submodels",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetReferencesResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/GetAllSubmodels/3/0",
          "https://admin-shell.io/aas/API/GetAllSubmodelsBySemanticId/3/0",
          "https://admin-shell.io/aas/API/GetAllSubmodelsByIdShort/3/0"
        ]
      }
    },
    "/submodels/$path": {
      "get": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Returns all Submodels in the Path notation",
        "operationId": "GetAllSubmodels-Path",
        "parameters": [
          {
            "name": "semanticId",
            "in": "query",
            "description": "The value of the semantic id reference (BASE64-URL-encoded)",
            "schema": {
              "maxLength": 3072,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "idShort",
            "in": "query",
            "description": "The Asset Administration Shell’s IdShort",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements in the response array",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "level",
            "in": "query",
            "description": "Determines the structural depth of the respective resource content",
            "required": false,
            "schema": {
              "type": "string",
              "default": "deep",
              "enum": [
                "deep",
                "core"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested Submodels",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPathItemsResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/GetAllSubmodels/3/0",
          "https://admin-shell.io/aas/API/GetAllSubmodelsBySemanticId/3/0",
          "https://admin-shell.io/aas/API/GetAllSubmodelsByIdShort/3/0"
        ]
      }
    },
    "/submodels/{submodelIdentifier}": {
      "get": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Returns a specific Submodel",
        "operationId": "GetSubmodelById",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "level",
            "in": "query",
            "description": "Determines the structural depth of the respective resource content",
            "required": false,
            "schema": {
              "type": "string",
              "default": "deep",
              "enum": [
                "deep",
                "core"
              ]
            }
          },
          {
            "name": "extent",
            "in": "query",
            "description": "Determines to which extent the resource is being serialized",
            "required": false,
            "schema": {
              "type": "string",
              "default": "withoutBlobValue",
              "enum": [
                "withBlobValue",
                "withoutBlobValue"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested Submodel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Submodel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/GetSubmodelById/3/0"
        ]
      },
      "put": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Updates an existing Submodel",
        "operationId": "PutSubmodelById",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        ],
        "requestBody": {
          "description": "Submodel object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Submodel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Submodel updated successfully"
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/PutSubmodelById/3/0"
        ]
      },
      "delete": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Deletes a Submodel",
        "operationId": "DeleteSubmodelById",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Submodel deleted successfully"
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/DeleteSubmodelById/3/0"
        ]
      },
      "patch": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Updates an existing Submodel",
        "operationId": "PatchSubmodelById",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "level",
            "in": "query",
            "description": "Determines the structural depth of the respective resource content",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "core",
              "enum": [
                "core"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "Submodel object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Submodel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Submodel updated successfully"
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/PatchSubmodelById/3/0"
        ]
      }
    },
    "/submodels/{submodelIdentifier}/$metadata": {
      "get": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Returns the metadata attributes of a specific Submodel",
        "operationId": "GetSubmodelById-Metadata",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "level",
            "in": "query",
            "description": "Determines the structural depth of the respective resource content",
            "required": false,
            "schema": {
              "type": "string",
              "default": "deep",
              "enum": [
                "deep",
                "core"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested Submodel in the metadata representation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmodelMetadata"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/GetSubmodelById/3/0"
        ]
      },
      "patch": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Updates the metadata attributes of an existing Submodel",
        "operationId": "PatchSubmodelById-Metadata",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "level",
            "in": "query",
            "description": "Determines the structural depth of the respective resource content",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "core",
              "enum": [
                "core"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "The metadata attributes of the Submodel object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmodelMetadata"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Submodel updated successfully"
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/PatchSubmodelById/3/0"
        ]
      }
    },
    "/submodels/{submodelIdentifier}/$value": {
      "get": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Returns a specific Submodel in the ValueOnly representation",
        "operationId": "GetSubmodelById-ValueOnly",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "level",
            "in": "query",
            "description": "Determines the structural depth of the respective resource content",
            "required": false,
            "schema": {
              "type": "string",
              "default": "deep",
              "enum": [
                "deep",
                "core"
              ]
            }
          },
          {
            "name": "extent",
            "in": "query",
            "description": "Determines to which extent the resource is being serialized",
            "required": false,
            "schema": {
              "type": "string",
              "default": "withoutBlobValue",
              "enum": [
                "withBlobValue",
                "withoutBlobValue"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested Submodel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmodelValue"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/GetSubmodelById/3/0"
        ]
      },
      "patch": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Updates the values of an existing Submodel",
        "operationId": "PatchSubmodelById-ValueOnly",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "level",
            "in": "query",
            "description": "Determines the structural depth of the respective resource content",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "core",
              "enum": [
                "core"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "Submodel object in its ValueOnly representation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmodelValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Submodel updated successfully"
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/PatchSubmodelById/3/0"
        ]
      }
    },
    "/submodels/{submodelIdentifier}/$reference": {
      "get": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Returns the Reference of a specific Submodel",
        "operationId": "GetSubmodelById-Reference",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested Submodel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Reference"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/GetSubmodelById/3/0"
        ]
      }
    },
    "/submodels/{submodelIdentifier}/$path": {
      "get": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Returns a specific Submodel in the Path notation",
        "operationId": "GetSubmodelById-Path",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "level",
            "in": "query",
            "description": "Determines the structural depth of the respective resource content",
            "required": false,
            "schema": {
              "type": "string",
              "default": "deep",
              "enum": [
                "deep",
                "core"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested Submodel",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PathItem"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/GetSubmodelById/3/0"
        ]
      }
    },
    "/submodels/{submodelIdentifier}/submodel-elements": {
      "get": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Returns all submodel elements including their hierarchy",
        "operationId": "GetAllSubmodelElements",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements in the response array",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "level",
            "in": "query",
            "description": "Determines the structural depth of the respective resource content",
            "required": false,
            "schema": {
              "type": "string",
              "default": "deep",
              "enum": [
                "deep",
                "core"
              ]
            }
          },
          {
            "name": "extent",
            "in": "query",
            "description": "Determines to which extent the resource is being serialized",
            "required": false,
            "schema": {
              "type": "string",
              "default": "withoutBlobValue",
              "enum": [
                "withBlobValue",
                "withoutBlobValue"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of found submodel elements",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSubmodelElementsResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/GetAllSubmodelElements/3/0"
        ]
      },
      "post": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Creates a new submodel element",
        "operationId": "PostSubmodelElement_SubmodelRepo",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        ],
        "requestBody": {
          "description": "Requested submodel element",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmodelElement"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Submodel element created successfully",
            "headers": {
              "Location": {
                "description": "URL of the newly created resource",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmodelElement"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "409": {
            "description": "Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/PostSubmodelElement/3/0"
        ]
      }
    },
    "/submodels/{submodelIdentifier}/submodel-elements/$metadata": {
      "get": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Returns the metadata attributes of all submodel elements including their hierarchy",
        "operationId": "GetAllSubmodelElements-Metadata_SubmodelRepo",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements in the response array",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "level",
            "in": "query",
            "description": "Determines the structural depth of the respective resource content",
            "required": false,
            "schema": {
              "type": "string",
              "default": "deep",
              "enum": [
                "deep",
                "core"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of found submodel elements",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSubmodelElementsMetadataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/GetAllSubmodelElements/3/0"
        ]
      }
    },
    "/submodels/{submodelIdentifier}/submodel-elements/$value": {
      "get": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Returns all submodel elements including their hierarchy in the ValueOnly representation",
        "operationId": "GetAllSubmodelElements-ValueOnly_SubmodelRepo",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements in the response array",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "level",
            "in": "query",
            "description": "Determines the structural depth of the respective resource content",
            "required": false,
            "schema": {
              "type": "string",
              "default": "deep",
              "enum": [
                "deep",
                "core"
              ]
            }
          },
          {
            "name": "extent",
            "in": "query",
            "description": "Determines to which extent the resource is being serialized",
            "required": false,
            "schema": {
              "type": "string",
              "default": "withoutBlobValue",
              "enum": [
                "withBlobValue",
                "withoutBlobValue"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of found submodel elements",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSubmodelElementsValueResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/GetAllSubmodelElements/3/0"
        ]
      }
    },
    "/submodels/{submodelIdentifier}/submodel-elements/$reference": {
      "get": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Returns the References of all submodel elements",
        "operationId": "GetAllSubmodelElements-Reference_SubmodelRepo",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements in the response array",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "level",
            "in": "query",
            "description": "Determines the structural depth of the respective resource content",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "core",
              "enum": [
                "core"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of found submodel elements",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetReferencesResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/GetAllSubmodelElements/3/0"
        ]
      }
    },
    "/submodels/{submodelIdentifier}/submodel-elements/$path": {
      "get": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Returns all submodel elements including their hierarchy in the Path notation",
        "operationId": "GetAllSubmodelElements-Path_SubmodelRepo",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements in the response array",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "level",
            "in": "query",
            "description": "Determines the structural depth of the respective resource content",
            "required": false,
            "schema": {
              "type": "string",
              "default": "deep",
              "enum": [
                "deep",
                "core"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of found submodel elements in the Path notation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPathItemsResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/GetAllSubmodelElements/3/0"
        ]
      }
    },
    "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}": {
      "get": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Returns a specific submodel element from the Submodel at a specified path",
        "operationId": "GetSubmodelElementByPath_SubmodelRepo",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "idShortPath",
            "in": "path",
            "description": "IdShort path to the submodel element (dot-separated)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "level",
            "in": "query",
            "description": "Determines the structural depth of the respective resource content",
            "required": false,
            "schema": {
              "type": "string",
              "default": "deep",
              "enum": [
                "deep",
                "core"
              ]
            }
          },
          {
            "name": "extent",
            "in": "query",
            "description": "Determines to which extent the resource is being serialized",
            "required": false,
            "schema": {
              "type": "string",
              "default": "withoutBlobValue",
              "enum": [
                "withBlobValue",
                "withoutBlobValue"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested submodel element",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmodelElement"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/GetSubmodelElementByPath/3/0"
        ]
      },
      "put": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Updates an existing submodel element at a specified path within submodel elements hierarchy",
        "operationId": "PutSubmodelElementByPath_SubmodelRepo",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "idShortPath",
            "in": "path",
            "description": "IdShort path to the submodel element (dot-separated)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "level",
            "in": "query",
            "description": "Determines the structural depth of the respective resource content",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "deep",
              "enum": [
                "deep"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "Requested submodel element",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmodelElement"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Submodel element updated successfully"
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/PutSubmodelElementByPath/3/0",
          "https://admin-shell.io/aas/API/SetSubmodelElementValueByPath/3/0"
        ]
      },
      "post": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Creates a new submodel element at a specified path within submodel elements hierarchy",
        "operationId": "PostSubmodelElementByPath_SubmodelRepo",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "idShortPath",
            "in": "path",
            "description": "IdShort path to the submodel element (dot-separated)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Requested submodel element",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmodelElement"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Submodel element created successfully",
            "headers": {
              "Location": {
                "description": "URL of the newly created resource",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmodelElement"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "409": {
            "description": "Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/PostSubmodelElementByPath/3/0"
        ]
      },
      "delete": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Deletes a submodel element at a specified path within the submodel elements hierarchy",
        "operationId": "DeleteSubmodelElementByPath_SubmodelRepo",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "idShortPath",
            "in": "path",
            "description": "IdShort path to the submodel element (dot-separated)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Submodel element deleted successfully"
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/DeleteSubmodelElementByPath/3/0"
        ]
      },
      "patch": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Updates an existing SubmodelElement",
        "operationId": "PatchSubmodelElementByPath_SubmodelRepo",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "idShortPath",
            "in": "path",
            "description": "IdShort path to the submodel element (dot-separated)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "level",
            "in": "query",
            "description": "Determines the structural depth of the respective resource content",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "core",
              "enum": [
                "core"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "SubmodelElement object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmodelElement"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "SubmodelElement updated successfully"
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/PatchSubmodelById/3/0"
        ]
      }
    },
    "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$metadata": {
      "get": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Returns the matadata attributes of a specific submodel element from the Submodel at a specified path",
        "operationId": "GetSubmodelElementByPath-Metadata_SubmodelRepo",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "idShortPath",
            "in": "path",
            "description": "IdShort path to the submodel element (dot-separated)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "level",
            "in": "query",
            "description": "Determines the structural depth of the respective resource content",
            "required": false,
            "schema": {
              "type": "string",
              "default": "deep",
              "enum": [
                "deep",
                "core"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata attributes of the requested submodel element",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmodelElementMetadata"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/GetSubmodelElementByPath/3/0"
        ]
      },
      "patch": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Updates the metadata attributes an existing SubmodelElement",
        "operationId": "PatchSubmodelElementByPath-Metadata_SubmodelRepo",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "idShortPath",
            "in": "path",
            "description": "IdShort path to the submodel element (dot-separated)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "level",
            "in": "query",
            "description": "Determines the structural depth of the respective resource content",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "core",
              "enum": [
                "core"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "Metadata attributes of the SubmodelElement",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmodelElementMetadata"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "SubmodelElement updated successfully"
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/PatchSubmodelElementByPath/3/0"
        ]
      }
    },
    "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$value": {
      "get": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Returns a specific submodel element from the Submodel at a specified path in the ValueOnly representation",
        "operationId": "GetSubmodelElementByPath-ValueOnly_SubmodelRepo",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "idShortPath",
            "in": "path",
            "description": "IdShort path to the submodel element (dot-separated)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "level",
            "in": "query",
            "description": "Determines the structural depth of the respective resource content",
            "required": false,
            "schema": {
              "type": "string",
              "default": "deep",
              "enum": [
                "deep",
                "core"
              ]
            }
          },
          {
            "name": "extent",
            "in": "query",
            "description": "Determines to which extent the resource is being serialized",
            "required": false,
            "schema": {
              "type": "string",
              "default": "withoutBlobValue",
              "enum": [
                "withBlobValue",
                "withoutBlobValue"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested submodel element",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmodelElementValue"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/GetSubmodelElementByPath/3/0"
        ]
      },
      "patch": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Updates the value of an existing SubmodelElement",
        "operationId": "PatchSubmodelElementByPath-ValueOnly_SubmodelRepo",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "idShortPath",
            "in": "path",
            "description": "IdShort path to the submodel element (dot-separated)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "level",
            "in": "query",
            "description": "Determines the structural depth of the respective resource content",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "core",
              "enum": [
                "core"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "The SubmodelElement in its ValueOnly representation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmodelElementValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Submodel updated successfully"
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/PatchSubmodelElementByPath/3/0"
        ]
      }
    },
    "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$reference": {
      "get": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Returns the Referene of a specific submodel element from the Submodel at a specified path",
        "operationId": "GetSubmodelElementByPath-Reference_SubmodelRepo",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "idShortPath",
            "in": "path",
            "description": "IdShort path to the submodel element (dot-separated)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "level",
            "in": "query",
            "description": "Determines the structural depth of the respective resource content",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "core",
              "enum": [
                "core"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested submodel element",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Reference"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/GetSubmodelElementByPath/3/0"
        ]
      }
    },
    "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$path": {
      "get": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Returns a specific submodel element from the Submodel at a specified path in the Path notation",
        "operationId": "GetSubmodelElementByPath-Path_SubmodelRepo",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "idShortPath",
            "in": "path",
            "description": "IdShort path to the submodel element (dot-separated)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "level",
            "in": "query",
            "description": "Determines the structural depth of the respective resource content",
            "required": false,
            "schema": {
              "type": "string",
              "default": "deep",
              "enum": [
                "deep",
                "core"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested submodel element",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PathItem"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/GetSubmodelElementByPath/3/0"
        ]
      }
    },
    "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment": {
      "get": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Downloads file content from a specific submodel element from the Submodel at a specified path",
        "operationId": "GetFileByPath_SubmodelRepo",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "idShortPath",
            "in": "path",
            "description": "IdShort path to the submodel element (dot-separated)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested file",
            "headers": {
              "Content-Disposition": {
                "description": "In order to physically download the file usually set to attachment with a filename",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string"
                },
                "example": "attachment; filename=\"filename.jpg\""
              }
            },
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed - Download only valid for File submodel element",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/GetFileByPath/3/0"
        ]
      },
      "put": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy",
        "operationId": "PutFileByPath_SubmodelRepo",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "idShortPath",
            "in": "path",
            "description": "IdShort path to the submodel element (dot-separated)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "File to upload",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/idShortPath_attachment_body"
              },
              "encoding": {
                "file": {
                  "contentType": "application/octet-stream",
                  "style": "form"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Submodel element updated successfully"
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed - Upload only valid for File submodel element",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/PutFileByPath/3/0"
        ]
      },
      "delete": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy",
        "operationId": "DeleteFileByPath_SubmodelRepo",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "idShortPath",
            "in": "path",
            "description": "IdShort path to the submodel element (dot-separated)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Submodel element updated successfully"
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/DeleteFileByPath/3/0"
        ]
      }
    },
    "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke": {
      "post": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Synchronously or asynchronously invokes an Operation at a specified path",
        "operationId": "InvokeOperation_SubmodelRepo",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "idShortPath",
            "in": "path",
            "description": "IdShort path to the submodel element (dot-separated)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Determines whether an operation invocation is performed asynchronously or synchronously",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "Operation request object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OperationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Operation result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed - Invoke only valid for Operation submodel element",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/InvokeOperationSync/3/0",
          "https://admin-shell.io/aas/API/InvokeOperationAsync/3/0"
        ]
      }
    },
    "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke/$value": {
      "post": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Synchronously or asynchronously invokes an Operation at a specified path",
        "operationId": "InvokeOperation-ValueOnly",
        "parameters": [
          {
            "name": "aasIdentifier",
            "in": "path",
            "description": "The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "idShortPath",
            "in": "path",
            "description": "IdShort path to the submodel element (dot-separated)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Determines whether an operation invocation is performed asynchronously or synchronously",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "Operation request object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OperationRequestValueOnly"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Operation result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultValueOnly"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/InvokeOperationSync/3/0",
          "https://admin-shell.io/aas/API/InvokeOperationAsync/3/0"
        ]
      }
    },
    "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-async": {
      "post": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Asynchronously invokes an Operation at a specified path",
        "operationId": "InvokeOperationAsync",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "idShortPath",
            "in": "path",
            "description": "IdShort path to the submodel element (dot-separated)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Operation request object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OperationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "The server has accepted the request.",
            "headers": {
              "Location": {
                "description": "The URL where the client can find more information about the request.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed - Invoke only valid for Operation submodel element",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/InvokeOperationAsync/3/0"
        ]
      }
    },
    "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-async/$value": {
      "post": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Asynchronously invokes an Operation at a specified path",
        "operationId": "InvokeOperationAsync-ValueOnly",
        "parameters": [
          {
            "name": "aasIdentifier",
            "in": "path",
            "description": "The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "idShortPath",
            "in": "path",
            "description": "IdShort path to the submodel element (dot-separated)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Operation request object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OperationRequestValueOnly"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "The server has accepted the request.",
            "headers": {
              "Location": {
                "description": "The URL where the client can find more information about the request.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/InvokeOperationAsync/3/0"
        ]
      }
    },
    "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-status/{handleId}": {
      "get": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Returns the status of an asynchronously invoked Operation",
        "operationId": "GetOperationAsyncStatus",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "idShortPath",
            "in": "path",
            "description": "IdShort path to the submodel element (dot-separated)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "handleId",
            "in": "path",
            "description": "The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation result object containing information that the 'executionState' is still 'Running'",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseOperationResult"
                }
              }
            }
          },
          "302": {
            "description": "The target resource is available but at a different location.",
            "headers": {
              "Location": {
                "description": "The URL where the client can find the target resource.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/GetOperationAsyncStatus/3/0"
        ]
      }
    },
    "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}": {
      "get": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Returns the Operation result of an asynchronously invoked Operation",
        "operationId": "GetOperationAsyncResult",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "idShortPath",
            "in": "path",
            "description": "IdShort path to the submodel element (dot-separated)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "handleId",
            "in": "path",
            "description": "The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/GetOperationAsyncResult/3/0"
        ]
      }
    },
    "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}/$value": {
      "get": {
        "tags": [
          "Submodel Repository API"
        ],
        "summary": "Returns the Operation result of an asynchronously invoked Operation",
        "operationId": "GetOperationAsyncResult-ValueOnly",
        "parameters": [
          {
            "name": "submodelIdentifier",
            "in": "path",
            "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "idShortPath",
            "in": "path",
            "description": "IdShort path to the submodel element (dot-separated)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "handleId",
            "in": "path",
            "description": "The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Value of the operation result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultValueOnly"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/GetOperationAsyncResult/3/0"
        ]
      }
    },
    "/serialization": {
      "get": {
        "tags": [
          "Serialization API"
        ],
        "summary": "Returns an appropriate serialization based on the specified format (see SerializationFormat)",
        "operationId": "GenerateSerializationByIds",
        "parameters": [
          {
            "name": "aasIds",
            "in": "query",
            "description": "The Asset Administration Shells' unique ids (UTF8-BASE64-URL-encoded)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "submodelIds",
            "in": "query",
            "description": "The Submodels' unique ids (UTF8-BASE64-URL-encoded)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "includeConceptDescriptions",
            "in": "query",
            "description": "Include Concept Descriptions?",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested serialization based on SerializationFormat",
            "content": {
              "application/asset-administration-shell-package+xml": {
                "schema": {
                  "type": "string",
                  "description": "AASX package",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Default error handling for unmentioned status codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/GenerateSerializationByIds/3/0"
        ]
      }
    },
    "/description": {
      "get": {
        "tags": [
          "Description API"
        ],
        "summary": "Returns the self-describing information of a network resource (ServiceDescription)",
        "operationId": "GetDescription",
        "responses": {
          "200": {
            "description": "Requested Description",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDescription"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. the server refused the authorization attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-semanticIds": [
          "https://admin-shell.io/aas/API/Descriptor/GetDescription/3/0"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "GetSubmodelsResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PagedResult"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Submodel"
                }
              }
            }
          }
        ]
      },
      "PagedResult": {
        "type": "object",
        "properties": {
          "paging_metadata": {
            "$ref": "#/components/schemas/PagedResult_paging_metadata"
          }
        }
      },
      "Submodel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Identifiable"
          },
          {
            "$ref": "#/components/schemas/HasKind"
          },
          {
            "$ref": "#/components/schemas/HasSemantics"
          },
          {
            "$ref": "#/components/schemas/Qualifiable"
          },
          {
            "$ref": "#/components/schemas/HasDataSpecification"
          },
          {
            "properties": {
              "submodelElements": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SubmodelElement_choice"
                }
              },
              "modelType": {
                "pattern": "Submodel",
                "type": "string"
              }
            }
          }
        ]
      },
      "Identifiable": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Referable"
          },
          {
            "required": [
              "id"
            ],
            "properties": {
              "administration": {
                "$ref": "#/components/schemas/AdministrativeInformation"
              },
              "id": {
                "maxLength": 2000,
                "minLength": 1,
                "pattern": "^([\\t\\n\\r -퟿-�]|\\ud800[\\udc00-\\udfff]|[\\ud801-\\udbfe][\\udc00-\\udfff]|\\udbff[\\udc00-\\udfff])*$",
                "type": "string"
              }
            }
          }
        ]
      },
      "Referable": {
        "allOf": [
          {
            "$ref": "#/components/schemas/HasExtensions"
          },
          {
            "required": [
              "modelType"
            ],
            "properties": {
              "category": {
                "maxLength": 128,
                "minLength": 1,
                "pattern": "^([\\t\\n\\r -퟿-�]|\\ud800[\\udc00-\\udfff]|[\\ud801-\\udbfe][\\udc00-\\udfff]|\\udbff[\\udc00-\\udfff])*$",
                "type": "string"
              },
              "idShort": {
                "type": "string",
                "allOf": [
                  {
                    "maxLength": 128,
                    "minLength": 1
                  },
                  {
                    "pattern": "^([\\t\\n\\r -퟿-�]|\\ud800[\\udc00-\\udfff]|[\\ud801-\\udbfe][\\udc00-\\udfff]|\\udbff[\\udc00-\\udfff])*$"
                  },
                  {
                    "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$"
                  }
                ]
              },
              "displayName": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LangStringNameType"
                }
              },
              "description": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LangStringTextType"
                }
              },
              "modelType": {
                "$ref": "#/components/schemas/ModelType"
              }
            }
          }
        ]
      },
      "HasExtensions": {
        "type": "object",
        "properties": {
          "extensions": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Extension"
            }
          }
        }
      },
      "Extension": {
        "allOf": [
          {
            "$ref": "#/components/schemas/HasSemantics"
          },
          {
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "maxLength": 128,
                "minLength": 1,
                "pattern": "^([\\t\\n\\r -퟿-�]|\\ud800[\\udc00-\\udfff]|[\\ud801-\\udbfe][\\udc00-\\udfff]|\\udbff[\\udc00-\\udfff])*$",
                "type": "string"
              },
              "valueType": {
                "$ref": "#/components/schemas/DataTypeDefXsd"
              },
              "value": {
                "type": "string"
              },
              "refersTo": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Reference"
                }
              }
            }
          }
        ]
      },
      "HasSemantics": {
        "type": "object",
        "properties": {
          "semanticId": {
            "$ref": "#/components/schemas/Reference"
          },
          "supplementalSemanticIds": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Reference"
            }
          }
        }
      },
      "Reference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReferenceParent"
          },
          {
            "properties": {
              "referredSemanticId": {
                "$ref": "#/components/schemas/ReferenceParent"
              }
            }
          }
        ]
      },
      "ReferenceParent": {
        "required": [
          "keys",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ReferenceTypes"
          },
          "keys": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Key"
            }
          }
        }
      },
      "ReferenceTypes": {
        "type": "string",
        "enum": [
          "ExternalReference",
          "ModelReference"
        ]
      },
      "Key": {
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/KeyTypes"
          },
          "value": {
            "maxLength": 2000,
            "minLength": 1,
            "pattern": "^([\\t\\n\\r -퟿-�]|\\ud800[\\udc00-\\udfff]|[\\ud801-\\udbfe][\\udc00-\\udfff]|\\udbff[\\udc00-\\udfff])*$",
            "type": "string"
          }
        }
      },
      "KeyTypes": {
        "type": "string",
        "enum": [
          "AnnotatedRelationshipElement",
          "AssetAdministrationShell",
          "BasicEventElement",
          "Blob",
          "Capability",
          "ConceptDescription",
          "DataElement",
          "Entity",
          "EventElement",
          "File",
          "FragmentReference",
          "GlobalReference",
          "Identifiable",
          "MultiLanguageProperty",
          "Operation",
          "Property",
          "Range",
          "Referable",
          "ReferenceElement",
          "RelationshipElement",
          "Submodel",
          "SubmodelElement",
          "SubmodelElementCollection",
          "SubmodelElementList"
        ]
      },
      "DataTypeDefXsd": {
        "type": "string",
        "enum": [
          "xs:anyURI",
          "xs:base64Binary",
          "xs:boolean",
          "xs:byte",
          "xs:date",
          "xs:dateTime",
          "xs:decimal",
          "xs:double",
          "xs:duration",
          "xs:float",
          "xs:gDay",
          "xs:gMonth",
          "xs:gMonthDay",
          "xs:gYear",
          "xs:gYearMonth",
          "xs:hexBinary",
          "xs:int",
          "xs:integer",
          "xs:long",
          "xs:negativeInteger",
          "xs:nonNegativeInteger",
          "xs:nonPositiveInteger",
          "xs:positiveInteger",
          "xs:short",
          "xs:string",
          "xs:time",
          "xs:unsignedByte",
          "xs:unsignedInt",
          "xs:unsignedLong",
          "xs:unsignedShort"
        ]
      },
      "LangStringNameType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractLangString"
          },
          {
            "properties": {
              "text": {
                "maxLength": 128
              }
            }
          }
        ]
      },
      "AbstractLangString": {
        "required": [
          "language",
          "text"
        ],
        "type": "object",
        "properties": {
          "language": {
            "pattern": "^(([a-zA-Z]{2,3}(-[a-zA-Z]{3}(-[a-zA-Z]{3}){2})?|[a-zA-Z]{4}|[a-zA-Z]{5,8})(-[a-zA-Z]{4})?(-([a-zA-Z]{2}|[0-9]{3}))?(-(([a-zA-Z0-9]){5,8}|[0-9]([a-zA-Z0-9]){3}))*(-[0-9A-WY-Za-wy-z](-([a-zA-Z0-9]){2,8})+)*(-[xX](-([a-zA-Z0-9]){1,8})+)?|[xX](-([a-zA-Z0-9]){1,8})+|((en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang)))$",
            "type": "string"
          },
          "text": {
            "minLength": 1,
            "pattern": "^([\\t\\n\\r -퟿-�]|\\ud800[\\udc00-\\udfff]|[\\ud801-\\udbfe][\\udc00-\\udfff]|\\udbff[\\udc00-\\udfff])*$",
            "type": "string"
          }
        }
      },
      "LangStringTextType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractLangString"
          },
          {
            "properties": {
              "text": {
                "maxLength": 1023
              }
            }
          }
        ]
      },
      "ModelType": {
        "type": "string",
        "enum": [
          "AnnotatedRelationshipElement",
          "AssetAdministrationShell",
          "BasicEventElement",
          "Blob",
          "Capability",
          "ConceptDescription",
          "DataSpecificationIec61360",
          "Entity",
          "File",
          "MultiLanguageProperty",
          "Operation",
          "Property",
          "Range",
          "ReferenceElement",
          "RelationshipElement",
          "Submodel",
          "SubmodelElementCollection",
          "SubmodelElementList"
        ]
      },
      "AdministrativeInformation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/HasDataSpecification"
          },
          {
            "properties": {
              "version": {
                "type": "string",
                "allOf": [
                  {
                    "maxLength": 4,
                    "minLength": 1
                  },
                  {
                    "pattern": "^([\\t\\n\\r -퟿-�]|\\ud800[\\udc00-\\udfff]|[\\ud801-\\udbfe][\\udc00-\\udfff]|\\udbff[\\udc00-\\udfff])*$"
                  },
                  {
                    "pattern": "^(0|[1-9][0-9]*)$"
                  }
                ]
              },
              "revision": {
                "type": "string",
                "allOf": [
                  {
                    "maxLength": 4,
                    "minLength": 1
                  },
                  {
                    "pattern": "^([\\t\\n\\r -퟿-�]|\\ud800[\\udc00-\\udfff]|[\\ud801-\\udbfe][\\udc00-\\udfff]|\\udbff[\\udc00-\\udfff])*$"
                  },
                  {
                    "pattern": "^(0|[1-9][0-9]*)$"
                  }
                ]
              },
              "creator": {
                "$ref": "#/components/schemas/Reference"
              },
              "templateId": {
                "maxLength": 2000,
                "minLength": 1,
                "pattern": "^([\\t\\n\\r -퟿-�]|\\ud800[\\udc00-\\udfff]|[\\ud801-\\udbfe][\\udc00-\\udfff]|\\udbff[\\udc00-\\udfff])*$",
                "type": "string"
              }
            }
          }
        ]
      },
      "HasDataSpecification": {
        "type": "object",
        "properties": {
          "embeddedDataSpecifications": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmbeddedDataSpecification"
            }
          }
        }
      },
      "EmbeddedDataSpecification": {
        "required": [
          "dataSpecification",
          "dataSpecificationContent"
        ],
        "type": "object",
        "properties": {
          "dataSpecification": {
            "$ref": "#/components/schemas/Reference"
          },
          "dataSpecificationContent": {
            "$ref": "#/components/schemas/DataSpecificationContent_choice"
          }
        }
      },
      "DataSpecificationContent_choice": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/DataSpecificationIec61360"
          }
        ]
      },
      "DataSpecificationIec61360": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataSpecificationContent"
          },
          {
            "required": [
              "preferredName"
            ],
            "properties": {
              "preferredName": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LangStringPreferredNameTypeIec61360"
                }
              },
              "shortName": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LangStringShortNameTypeIec61360"
                }
              },
              "unit": {
                "minLength": 1,
                "pattern": "^([\\t\\n\\r -퟿-�]|\\ud800[\\udc00-\\udfff]|[\\ud801-\\udbfe][\\udc00-\\udfff]|\\udbff[\\udc00-\\udfff])*$",
                "type": "string"
              },
              "unitId": {
                "$ref": "#/components/schemas/Reference"
              },
              "sourceOfDefinition": {
                "minLength": 1,
                "pattern": "^([\\t\\n\\r -퟿-�]|\\ud800[\\udc00-\\udfff]|[\\ud801-\\udbfe][\\udc00-\\udfff]|\\udbff[\\udc00-\\udfff])*$",
                "type": "string"
              },
              "symbol": {
                "minLength": 1,
                "pattern": "^([\\t\\n\\r -퟿-�]|\\ud800[\\udc00-\\udfff]|[\\ud801-\\udbfe][\\udc00-\\udfff]|\\udbff[\\udc00-\\udfff])*$",
                "type": "string"
              },
              "dataType": {
                "$ref": "#/components/schemas/DataTypeIec61360"
              },
              "definition": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LangStringDefinitionTypeIec61360"
                }
              },
              "valueFormat": {
                "minLength": 1,
                "pattern": "^([\\t\\n\\r -퟿-�]|\\ud800[\\udc00-\\udfff]|[\\ud801-\\udbfe][\\udc00-\\udfff]|\\udbff[\\udc00-\\udfff])*$",
                "type": "string"
              },
              "valueList": {
                "$ref": "#/components/schemas/ValueList"
              },
              "value": {
                "maxLength": 2000,
                "minLength": 1,
                "pattern": "^([\\t\\n\\r -퟿-�]|\\ud800[\\udc00-\\udfff]|[\\ud801-\\udbfe][\\udc00-\\udfff]|\\udbff[\\udc00-\\udfff])*$",
                "type": "string"
              },
              "levelType": {
                "$ref": "#/components/schemas/LevelType"
              },
              "modelType": {
                "pattern": "DataSpecificationIec61360",
                "type": "string"
              }
            }
          }
        ]
      },
      "DataSpecificationContent": {
        "required": [
          "modelType"
        ],
        "type": "object",
        "properties": {
          "modelType": {
            "$ref": "#/components/schemas/ModelType"
          }
        }
      },
      "LangStringPreferredNameTypeIec61360": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractLangString"
          },
          {
            "properties": {
              "text": {
                "maxLength": 255
              }
            }
          }
        ]
      },
      "LangStringShortNameTypeIec61360": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractLangString"
          },
          {
            "properties": {
              "text": {
                "maxLength": 18
              }
            }
          }
        ]
      },
      "DataTypeIec61360": {
        "type": "string",
        "enum": [
          "BLOB",
          "BOOLEAN",
          "DATE",
          "FILE",
          "HTML",
          "INTEGER_COUNT",
          "INTEGER_CURRENCY",
          "INTEGER_MEASURE",
          "IRDI",
          "IRI",
          "RATIONAL",
          "RATIONAL_MEASURE",
          "REAL_COUNT",
          "REAL_CURRENCY",
          "REAL_MEASURE",
          "STRING",
          "STRING_TRANSLATABLE",
          "TIME",
          "TIMESTAMP"
        ]
      },
      "LangStringDefinitionTypeIec61360": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractLangString"
          },
          {
            "properties": {
              "text": {
                "maxLength": 1023
              }
            }
          }
        ]
      },
      "ValueList": {
        "required": [
          "valueReferencePairs"
        ],
        "type": "object",
        "properties": {
          "valueReferencePairs": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValueReferencePair"
            }
          }
        }
      },
      "ValueReferencePair": {
        "required": [
          "value",
          "valueId"
        ],
        "type": "object",
        "properties": {
          "value": {
            "maxLength": 2000,
            "minLength": 1,
            "pattern": "^([\\t\\n\\r -퟿-�]|\\ud800[\\udc00-\\udfff]|[\\ud801-\\udbfe][\\udc00-\\udfff]|\\udbff[\\udc00-\\udfff])*$",
            "type": "string"
          },
          "valueId": {
            "$ref": "#/components/schemas/Reference"
          }
        }
      },
      "LevelType": {
        "required": [
          "max",
          "min",
          "nom",
          "typ"
        ],
        "type": "object",
        "properties": {
          "min": {
            "type": "boolean"
          },
          "nom": {
            "type": "boolean"
          },
          "typ": {
            "type": "boolean"
          },
          "max": {
            "type": "boolean"
          }
        }
      },
      "HasKind": {
        "type": "object",
        "properties": {
          "kind": {
            "$ref": "#/components/schemas/ModellingKind"
          }
        }
      },
      "ModellingKind": {
        "type": "string",
        "enum": [
          "Instance",
          "Template"
        ]
      },
      "Qualifiable": {
        "required": [
          "modelType"
        ],
        "type": "object",
        "properties": {
          "qualifiers": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Qualifier"
            }
          },
          "modelType": {
            "$ref": "#/components/schemas/ModelType"
          }
        }
      },
      "Qualifier": {
        "allOf": [
          {
            "$ref": "#/components/schemas/HasSemantics"
          },
          {
            "required": [
              "type",
              "valueType"
            ],
            "properties": {
              "kind": {
                "$ref": "#/components/schemas/QualifierKind"
              },
              "type": {
                "maxLength": 128,
                "minLength": 1,
                "pattern": "^([\\t\\n\\r -퟿-�]|\\ud800[\\udc00-\\udfff]|[\\ud801-\\udbfe][\\udc00-\\udfff]|\\udbff[\\udc00-\\udfff])*$",
                "type": "string"
              },
              "valueType": {
                "$ref": "#/components/schemas/DataTypeDefXsd"
              },
              "value": {
                "type": "string"
              },
              "valueId": {
                "$ref": "#/components/schemas/Reference"
              }
            }
          }
        ]
      },
      "QualifierKind": {
        "type": "string",
        "enum": [
          "ConceptQualifier",
          "TemplateQualifier",
          "ValueQualifier"
        ]
      },
      "SubmodelElement_choice": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/RelationshipElement"
          },
          {
            "$ref": "#/components/schemas/AnnotatedRelationshipElement"
          },
          {
            "$ref": "#/components/schemas/BasicEventElement"
          },
          {
            "$ref": "#/components/schemas/Blob"
          },
          {
            "$ref": "#/components/schemas/Capability"
          },
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "$ref": "#/components/schemas/File"
          },
          {
            "$ref": "#/components/schemas/MultiLanguageProperty"
          },
          {
            "$ref": "#/components/schemas/Operation"
          },
          {
            "$ref": "#/components/schemas/Property"
          },
          {
            "$ref": "#/components/schemas/Range"
          },
          {
            "$ref": "#/components/schemas/ReferenceElement"
          },
          {
            "$ref": "#/components/schemas/SubmodelElementCollection"
          },
          {
            "$ref": "#/components/schemas/SubmodelElementList"
          }
        ]
      },
      "RelationshipElement": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RelationshipElement_abstract"
          },
          {
            "properties": {
              "modelType": {
                "pattern": "RelationshipElement",
                "type": "string"
              }
            }
          }
        ]
      },
      "RelationshipElement_abstract": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SubmodelElement"
          },
          {
            "required": [
              "first",
              "second"
            ],
            "properties": {
              "first": {
                "$ref": "#/components/schemas/Reference"
              },
              "second": {
                "$ref": "#/components/schemas/Reference"
              }
            }
          }
        ]
      },
      "SubmodelElement": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Referable"
          },
          {
            "$ref": "#/components/schemas/HasSemantics"
          },
          {
            "$ref": "#/components/schemas/Qualifiable"
          },
          {
            "$ref": "#/components/schemas/HasDataSpecification"
          }
        ]
      },
      "AnnotatedRelationshipElement": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RelationshipElement_abstract"
          },
          {
            "properties": {
              "annotations": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DataElement_choice"
                }
              },
              "modelType": {
                "pattern": "AnnotatedRelationshipElement",
                "type": "string"
              }
            }
          }
        ]
      },
      "DataElement_choice": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Blob"
          },
          {
            "$ref": "#/components/schemas/File"
          },
          {
            "$ref": "#/components/schemas/MultiLanguageProperty"
          },
          {
            "$ref": "#/components/schemas/Property"
          },
          {
            "$ref": "#/components/schemas/Range"
          },
          {
            "$ref": "#/components/schemas/ReferenceElement"
          }
        ]
      },
      "Blob": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataElement"
          },
          {
            "required": [
              "contentType"
            ],
            "properties": {
              "value": {
                "type": "string",
                "format": "byte"
              },
              "contentType": {
                "type": "string",
                "allOf": [
                  {
                    "maxLength": 100,
                    "minLength": 1
                  },
                  {
                    "pattern": "^([\\t\\n\\r -퟿-�]|\\ud800[\\udc00-\\udfff]|[\\ud801-\\udbfe][\\udc00-\\udfff]|\\udbff[\\udc00-\\udfff])*$"
                  },
                  {
                    "pattern": "^([!#$%&'*+\\-.^_`|~0-9a-zA-Z])+/([!#$%&'*+\\-.^_`|~0-9a-zA-Z])+([ \\t]*;[ \\t]*([!#$%&'*+\\-.^_`|~0-9a-zA-Z])+=(([!#$%&'*+\\-.^_`|~0-9a-zA-Z])+|\"(([\\t !#-\\[\\]-~]|[-ÿ])|\\\\([\\t !-~]|[-ÿ]))*\"))*$"
                  }
                ]
              },
              "modelType": {
                "pattern": "Blob",
                "type": "string"
              }
            }
          }
        ]
      },
      "DataElement": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SubmodelElement"
          }
        ]
      },
      "File": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataElement"
          },
          {
            "required": [
              "contentType"
            ],
            "properties": {
              "value": {
                "type": "string",
                "allOf": [
                  {
                    "maxLength": 2000,
                    "minLength": 1
                  },
                  {
                    "pattern": "^([\\t\\n\\r -퟿-�]|\\ud800[\\udc00-\\udfff]|[\\ud801-\\udbfe][\\udc00-\\udfff]|\\udbff[\\udc00-\\udfff])*$"
                  },
                  {
                    "pattern": "^file:(//((localhost|(\\[((([0-9A-Fa-f]{1,4}:){6}([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|::([0-9A-Fa-f]{1,4}:){5}([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|([0-9A-Fa-f]{1,4})?::([0-9A-Fa-f]{1,4}:){4}([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})?::([0-9A-Fa-f]{1,4}:){3}([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9A-Fa-f]{1,4}:){2}[0-9A-Fa-f]{1,4})?::([0-9A-Fa-f]{1,4}:){2}([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9A-Fa-f]{1,4}:){3}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}:([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9A-Fa-f]{1,4}:){4}[0-9A-Fa-f]{1,4})?::([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9A-Fa-f]{1,4}:){5}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}|(([0-9A-Fa-f]{1,4}:){6}[0-9A-Fa-f]{1,4})?::)|[vV][0-9A-Fa-f]+\\.([a-zA-Z0-9\\-._~]|[!$&'()*+,;=]|:)+)\\]|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])|([a-zA-Z0-9\\-._~]|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=])*)))?/((([a-zA-Z0-9\\-._~]|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|[:@]))+(/(([a-zA-Z0-9\\-._~]|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|[:@]))*)*)?|/((([a-zA-Z0-9\\-._~]|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|[:@]))+(/(([a-zA-Z0-9\\-._~]|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|[:@]))*)*)?)$"
                  }
                ]
              },
              "contentType": {
                "type": "string",
                "allOf": [
                  {
                    "maxLength": 100,
                    "minLength": 1
                  },
                  {
                    "pattern": "^([\\t\\n\\r -퟿-�]|\\ud800[\\udc00-\\udfff]|[\\ud801-\\udbfe][\\udc00-\\udfff]|\\udbff[\\udc00-\\udfff])*$"
                  },
                  {
                    "pattern": "^([!#$%&'*+\\-.^_`|~0-9a-zA-Z])+/([!#$%&'*+\\-.^_`|~0-9a-zA-Z])+([\\t]*;[ \\t]*([!#$%&'*+\\-.^_`|~0-9a-zA-Z])+=(([!#$%&'*+\\-.^_`|~0-9a-zA-Z])+|\"(([\\t!#-\\[\\]-~]|[-ÿ])|\\\\([\\t !-~]|[-ÿ]))*\"))*$"
                  }
                ]
              },
              "modelType": {
                "pattern": "File",
                "type": "string"
              }
            }
          }
        ]
      },
      "MultiLanguageProperty": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataElement"
          },
          {
            "properties": {
              "value": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LangStringTextType"
                }
              },
              "valueId": {
                "$ref": "#/components/schemas/Reference"
              },
              "modelType": {
                "pattern": "MultiLanguageProperty",
                "type": "string"
              }
            }
          }
        ]
      },
      "Property": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataElement"
          },
          {
            "required": [
              "valueType"
            ],
            "properties": {
              "valueType": {
                "$ref": "#/components/schemas/DataTypeDefXsd"
              },
              "value": {
                "type": "string"
              },
              "valueId": {
                "$ref": "#/components/schemas/Reference"
              },
              "modelType": {
                "pattern": "Property",
                "type": "string"
              }
            }
          }
        ]
      },
      "Range": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataElement"
          },
          {
            "required": [
              "valueType"
            ],
            "properties": {
              "valueType": {
                "$ref": "#/components/schemas/DataTypeDefXsd"
              },
              "min": {
                "type": "string"
              },
              "max": {
                "type": "string"
              },
              "modelType": {
                "pattern": "Range",
                "type": "string"
              }
            }
          }
        ]
      },
      "ReferenceElement": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataElement"
          },
          {
            "properties": {
              "value": {
                "$ref": "#/components/schemas/Reference"
              },
              "modelType": {
                "pattern": "ReferenceElement",
                "type": "string"
              }
            }
          }
        ]
      },
      "BasicEventElement": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventElement"
          },
          {
            "required": [
              "direction",
              "observed",
              "state"
            ],
            "properties": {
              "observed": {
                "$ref": "#/components/schemas/Reference"
              },
              "direction": {
                "$ref": "#/components/schemas/Direction"
              },
              "state": {
                "$ref": "#/components/schemas/StateOfEvent"
              },
              "messageTopic": {
                "maxLength": 255,
                "minLength": 1,
                "pattern": "^([\\t\\n\\r -퟿-�]|\\ud800[\\udc00-\\udfff]|[\\ud801-\\udbfe][\\udc00-\\udfff]|\\udbff[\\udc00-\\udfff])*$",
                "type": "string"
              },
              "messageBroker": {
                "$ref": "#/components/schemas/Reference"
              },
              "lastUpdate": {
                "pattern": "^-?(([1-9][0-9][0-9][0-9]+)|(0[0-9][0-9][0-9]))-((0[1-9])|(1[0-2]))-((0[1-9])|([12][0-9])|(3[01]))T(((([01][0-9])|(2[0-3])):[0-5][0-9]:([0-5][0-9])(\\.[0-9]+)?)|24:00:00(\\.0+)?)(Z|\\+00:00|-00:00)$",
                "type": "string"
              },
              "minInterval": {
                "pattern": "^-?P((([0-9]+Y([0-9]+M)?([0-9]+D)?|([0-9]+M)([0-9]+D)?|([0-9]+D))(T(([0-9]+H)([0-9]+M)?([0-9]+(\\.[0-9]+)?S)?|([0-9]+M)([0-9]+(\\.[0-9]+)?S)?|([0-9]+(\\.[0-9]+)?S)))?)|(T(([0-9]+H)([0-9]+M)?([0-9]+(\\.[0-9]+)?S)?|([0-9]+M)([0-9]+(\\.[0-9]+)?S)?|([0-9]+(\\.[0-9]+)?S))))$",
                "type": "string"
              },
              "maxInterval": {
                "pattern": "^-?P((([0-9]+Y([0-9]+M)?([0-9]+D)?|([0-9]+M)([0-9]+D)?|([0-9]+D))(T(([0-9]+H)([0-9]+M)?([0-9]+(\\.[0-9]+)?S)?|([0-9]+M)([0-9]+(\\.[0-9]+)?S)?|([0-9]+(\\.[0-9]+)?S)))?)|(T(([0-9]+H)([0-9]+M)?([0-9]+(\\.[0-9]+)?S)?|([0-9]+M)([0-9]+(\\.[0-9]+)?S)?|([0-9]+(\\.[0-9]+)?S))))$",
                "type": "string"
              },
              "modelType": {
                "pattern": "BasicEventElement",
                "type": "string"
              }
            }
          }
        ]
      },
      "EventElement": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SubmodelElement"
          }
        ]
      },
      "Direction": {
        "type": "string",
        "enum": [
          "input",
          "output"
        ]
      },
      "StateOfEvent": {
        "type": "string",
        "enum": [
          "off",
          "on"
        ]
      },
      "Capability": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SubmodelElement"
          },
          {
            "properties": {
              "modelType": {
                "pattern": "Capability",
                "type": "string"
              }
            }
          }
        ]
      },
      "Entity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SubmodelElement"
          },
          {
            "required": [
              "entityType"
            ],
            "properties": {
              "statements": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SubmodelElement_choice"
                }
              },
              "entityType": {
                "$ref": "#/components/schemas/EntityType"
              },
              "globalAssetId": {
                "maxLength": 2000,
                "minLength": 1,
                "pattern": "^([\\t\\n\\r -퟿-�]|\\ud800[\\udc00-\\udfff]|[\\ud801-\\udbfe][\\udc00-\\udfff]|\\udbff[\\udc00-\\udfff])*$",
                "type": "string"
              },
              "specificAssetIds": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SpecificAssetId"
                }
              },
              "modelType": {
                "pattern": "Entity",
                "type": "string"
              }
            }
          }
        ]
      },
      "EntityType": {
        "type": "string",
        "enum": [
          "CoManagedEntity",
          "SelfManagedEntity"
        ]
      },
      "SpecificAssetId": {
        "allOf": [
          {
            "$ref": "#/components/schemas/HasSemantics"
          },
          {
            "required": [
              "name",
              "value"
            ],
            "properties": {
              "name": {
                "maxLength": 64,
                "minLength": 1,
                "pattern": "^([\\t\\n\\r -퟿-�]|\\ud800[\\udc00-\\udfff]|[\\ud801-\\udbfe][\\udc00-\\udfff]|\\udbff[\\udc00-\\udfff])*$",
                "type": "string"
              },
              "value": {
                "maxLength": 2000,
                "minLength": 1,
                "pattern": "^([\\t\\n\\r -퟿-�]|\\ud800[\\udc00-\\udfff]|[\\ud801-\\udbfe][\\udc00-\\udfff]|\\udbff[\\udc00-\\udfff])*$",
                "type": "string"
              },
              "externalSubjectId": {
                "$ref": "#/components/schemas/Reference"
              }
            }
          }
        ]
      },
      "Operation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SubmodelElement"
          },
          {
            "properties": {
              "inputVariables": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OperationVariable"
                }
              },
              "outputVariables": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OperationVariable"
                }
              },
              "inoutputVariables": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OperationVariable"
                }
              },
              "modelType": {
                "pattern": "Operation",
                "type": "string"
              }
            }
          }
        ]
      },
      "OperationVariable": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/SubmodelElement_choice"
          }
        }
      },
      "SubmodelElementCollection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SubmodelElement"
          },
          {
            "properties": {
              "value": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SubmodelElement_choice"
                }
              },
              "modelType": {
                "pattern": "SubmodelElementCollection",
                "type": "string"
              }
            }
          }
        ]
      },
      "SubmodelElementList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SubmodelElement"
          },
          {
            "required": [
              "typeValueListElement"
            ],
            "properties": {
              "orderRelevant": {
                "type": "boolean"
              },
              "semanticIdListElement": {
                "$ref": "#/components/schemas/Reference"
              },
              "typeValueListElement": {
                "$ref": "#/components/schemas/AasSubmodelElements"
              },
              "valueTypeListElement": {
                "$ref": "#/components/schemas/DataTypeDefXsd"
              },
              "value": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SubmodelElement_choice"
                }
              },
              "modelType": {
                "pattern": "SubmodelElementList",
                "type": "string"
              }
            }
          }
        ]
      },
      "AasSubmodelElements": {
        "type": "string",
        "enum": [
          "AnnotatedRelationshipElement",
          "BasicEventElement",
          "Blob",
          "Capability",
          "DataElement",
          "Entity",
          "EventElement",
          "File",
          "MultiLanguageProperty",
          "Operation",
          "Property",
          "Range",
          "ReferenceElement",
          "RelationshipElement",
          "SubmodelElement",
          "SubmodelElementCollection",
          "SubmodelElementList"
        ]
      },
      "Result": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Message": {
        "type": "object",
        "properties": {
          "code": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "correlationId": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string"
          },
          "messageType": {
            "type": "string",
            "enum": [
              "Undefined",
              "Info",
              "Warning",
              "Error",
              "Exception"
            ]
          },
          "text": {
            "type": "string"
          },
          "timestamp": {
            "pattern": "^-?(([1-9][0-9][0-9][0-9]+)|(0[0-9][0-9][0-9]))-((0[1-9])|(1[0-2]))-((0[1-9])|([12][0-9])|(3[01]))T(((([01][0-9])|(2[0-3])):[0-5][0-9]:([0-5][0-9])(\\.[0-9]+)?)|24:00:00(\\.0+)?)(Z|\\+00:00|-00:00)$",
            "type": "string"
          }
        }
      },
      "GetSubmodelsMetadataResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PagedResult"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SubmodelMetadata"
                }
              }
            }
          }
        ]
      },
      "SubmodelMetadata": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Identifiable"
          },
          {
            "$ref": "#/components/schemas/HasDataSpecification"
          },
          {
            "$ref": "#/components/schemas/Qualifiable"
          },
          {
            "$ref": "#/components/schemas/HasSemantics"
          },
          {
            "$ref": "#/components/schemas/HasKind"
          }
        ]
      },
      "GetSubmodelsValueResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PagedResult"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SubmodelValue"
                }
              }
            }
          }
        ]
      },
      "SubmodelValue": {
        "properties": {
          "submodelElements": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmodelElement"
            }
          }
        }
      },
      "GetReferencesResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PagedResult"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Reference"
                }
              }
            }
          }
        ]
      },
      "GetPathItemsResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PagedResult"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PathItem"
                }
              }
            }
          }
        ]
      },
      "PathItem": {
        "pattern": "[A-Za-z][A-Za-z0-9_]+(\\.[A-Za-z][A-Za-z0-9_]+){0,}",
        "type": "string"
      },
      "GetSubmodelElementsResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PagedResult"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SubmodelElement"
                }
              }
            }
          }
        ]
      },
      "GetSubmodelElementsMetadataResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PagedResult"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SubmodelElementMetadata"
                }
              }
            }
          }
        ]
      },
      "SubmodelElementMetadata": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SubmodelElementAttributes"
          }
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/BlobMetadata"
          },
          {
            "$ref": "#/components/schemas/FileMetadata"
          },
          {
            "$ref": "#/components/schemas/CapabilityMetadata"
          },
          {
            "$ref": "#/components/schemas/EntityMetadata"
          },
          {
            "$ref": "#/components/schemas/BasicEventElementMetadata"
          },
          {
            "$ref": "#/components/schemas/MultiLanguagePropertyMetadata"
          },
          {
            "$ref": "#/components/schemas/OperationMetadata"
          },
          {
            "$ref": "#/components/schemas/PropertyMetadata"
          },
          {
            "$ref": "#/components/schemas/RangeMetadata"
          },
          {
            "$ref": "#/components/schemas/ReferenceElementMetadata"
          },
          {
            "$ref": "#/components/schemas/AnnotatedRelationshipElementMetadata"
          },
          {
            "$ref": "#/components/schemas/RelationshipElementMetadata"
          },
          {
            "$ref": "#/components/schemas/SubmodelElementListMetadata"
          },
          {
            "$ref": "#/components/schemas/SubmodelElementCollectionMetadata"
          }
        ]
      },
      "SubmodelElementAttributes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Referable"
          },
          {
            "$ref": "#/components/schemas/HasDataSpecification"
          },
          {
            "$ref": "#/components/schemas/HasSemantics"
          },
          {
            "$ref": "#/components/schemas/Qualifiable"
          },
          {
            "$ref": "#/components/schemas/HasKind"
          }
        ]
      },
      "BlobMetadata": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Referable"
          },
          {
            "$ref": "#/components/schemas/HasDataSpecification"
          },
          {
            "$ref": "#/components/schemas/HasSemantics"
          },
          {
            "$ref": "#/components/schemas/Qualifiable"
          },
          {
            "$ref": "#/components/schemas/HasKind"
          }
        ]
      },
      "FileMetadata": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SubmodelElementAttributes"
          }
        ]
      },
      "CapabilityMetadata": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SubmodelElementAttributes"
          }
        ]
      },
      "EntityMetadata": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SubmodelElementAttributes"
          }
        ]
      },
      "BasicEventElementMetadata": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SubmodelElementAttributes"
          },
          {
            "properties": {
              "direction": {
                "$ref": "#/components/schemas/Direction"
              },
              "state": {
                "$ref": "#/components/schemas/StateOfEvent"
              },
              "messageTopic": {
                "maxLength": 255,
                "type": "string"
              },
              "messageBroker": {
                "$ref": "#/components/schemas/Reference"
              },
              "lastUpdate": {
                "type": "string"
              },
              "minInterval": {
                "type": "string"
              },
              "maxInterval": {
                "type": "string"
              }
            }
          }
        ]
      },
      "MultiLanguagePropertyMetadata": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SubmodelElementAttributes"
          }
        ]
      },
      "OperationMetadata": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SubmodelElementAttributes"
          }
        ]
      },
      "PropertyMetadata": {
        "properties": {
          "valueType": {
            "$ref": "#/components/schemas/DataTypeDefXsd"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/SubmodelElementAttributes"
          }
        ]
      },
      "RangeMetadata": {
        "properties": {
          "valueType": {
            "$ref": "#/components/schemas/DataTypeDefXsd"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/SubmodelElementAttributes"
          }
        ]
      },
      "ReferenceElementMetadata": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SubmodelElementAttributes"
          }
        ]
      },
      "AnnotatedRelationshipElementMetadata": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Referable"
          },
          {
            "$ref": "#/components/schemas/HasDataSpecification"
          },
          {
            "$ref": "#/components/schemas/HasSemantics"
          },
          {
            "$ref": "#/components/schemas/Qualifiable"
          },
          {
            "$ref": "#/components/schemas/HasKind"
          }
        ]
      },
      "RelationshipElementMetadata": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SubmodelElementAttributes"
          }
        ]
      },
      "SubmodelElementListMetadata": {
        "properties": {
          "orderRelevant": {
            "type": "boolean"
          },
          "semanticIdListElement": {
            "$ref": "#/components/schemas/Reference"
          },
          "typeValueListElement": {
            "$ref": "#/components/schemas/ModelType"
          },
          "valueTypeListElement": {
            "$ref": "#/components/schemas/DataTypeDefXsd"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/SubmodelElementAttributes"
          }
        ]
      },
      "SubmodelElementCollectionMetadata": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SubmodelElementAttributes"
          }
        ]
      },
      "GetSubmodelElementsValueResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PagedResult"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SubmodelElementValue"
                }
              }
            }
          }
        ]
      },
      "SubmodelElementValue": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/BasicEventElementValue"
          },
          {
            "$ref": "#/components/schemas/PropertyValue"
          },
          {
            "$ref": "#/components/schemas/MultiLanguagePropertyValue"
          },
          {
            "$ref": "#/components/schemas/BlobValue"
          },
          {
            "$ref": "#/components/schemas/FileValue"
          },
          {
            "$ref": "#/components/schemas/RangeValue"
          },
          {
            "$ref": "#/components/schemas/ReferenceElementValue"
          },
          {
            "$ref": "#/components/schemas/RelationshipElementValue"
          },
          {
            "$ref": "#/components/schemas/AnnotatedRelationshipElementValue"
          },
          {
            "$ref": "#/components/schemas/EntityValue"
          },
          {
            "$ref": "#/components/schemas/SubmodelElementCollectionValue"
          },
          {
            "$ref": "#/components/schemas/SubmodelElementListValue"
          }
        ]
      },
      "BasicEventElementValue": {
        "required": [
          "observed"
        ],
        "type": "object",
        "properties": {
          "observed": {
            "$ref": "#/components/schemas/ReferenceValue"
          }
        }
      },
      "ReferenceValue": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ReferenceTypes"
          },
          "keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Key"
            }
          }
        }
      },
      "PropertyValue": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/StringValue"
          },
          {
            "$ref": "#/components/schemas/NumberValue"
          },
          {
            "$ref": "#/components/schemas/BooleanValue"
          }
        ]
      },
      "StringValue": {
        "type": "string"
      },
      "NumberValue": {
        "type": "number"
      },
      "BooleanValue": {
        "type": "boolean"
      },
      "MultiLanguagePropertyValue": {
        "type": "object",
        "description": "Since patternProperties and propertyNames are not supported by OpenApi yet, the ValueOnly serialization for this elements works with the key-attribute as the JSON-property name and the value-attribute as the corresponding value."
      },
      "BlobValue": {
        "required": [
          "contentType",
          "value"
        ],
        "type": "object",
        "properties": {
          "contentType": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "FileValue": {
        "required": [
          "contentType",
          "value"
        ],
        "type": "object",
        "properties": {
          "contentType": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "value": {
            "maxLength": 2000,
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "RangeValue": {
        "required": [
          "max",
          "min"
        ],
        "type": "object",
        "properties": {
          "max": {
            "type": "number"
          },
          "min": {
            "type": "number"
          }
        }
      },
      "ReferenceElementValue": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ReferenceTypes"
          },
          "keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Key"
            }
          }
        }
      },
      "RelationshipElementValue": {
        "required": [
          "first",
          "second"
        ],
        "type": "object",
        "properties": {
          "first": {
            "$ref": "#/components/schemas/ReferenceValue"
          },
          "second": {
            "$ref": "#/components/schemas/ReferenceValue"
          }
        }
      },
      "AnnotatedRelationshipElementValue": {
        "required": [
          "first",
          "second"
        ],
        "type": "object",
        "properties": {
          "first": {
            "$ref": "#/components/schemas/ReferenceValue"
          },
          "second": {
            "$ref": "#/components/schemas/ReferenceValue"
          },
          "annotations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValueOnly"
            }
          }
        }
      },
      "ValueOnly": {
        "type": "object",
        "description": "The ValueOnly serialization of submodel elements (patternProperties and propertyNames will be supported propably with OpenApi 3.1). The full description of the generic JSON validation schema for the ValueOnly-serialization can be found in chapter 11.4.3 in Details of the Asset Administration Shell Part 2.\n"
      },
      "EntityValue": {
        "required": [
          "entityType",
          "statements"
        ],
        "type": "object",
        "properties": {
          "entityType": {
            "$ref": "#/components/schemas/EntityType"
          },
          "globalAssetId": {
            "maxLength": 2000,
            "minLength": 1,
            "pattern": "^[\\x09\\x0A\\x0D\\x20-\\uD7FF\\uE000-\\uFFFD\\U00010000-\\U0010FFFF]*$",
            "type": "string"
          },
          "specificAssetIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpecificAssetIdValue"
            }
          },
          "statements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValueOnly"
            }
          }
        }
      },
      "SpecificAssetIdValue": {
        "type": "object",
        "description": "Since patternProperties and propertyNames are not supported by OpenApi yet, the ValueOnly serialization for this elements works with the key-attribute as the JSON-property name and the value-attribute as the corresponding value."
      },
      "SubmodelElementCollectionValue": {
        "type": "object",
        "description": "Since patternProperties and propertyNames are not supported by OpenApi yet, the ValueOnly serialization for this elements works with the key-attribute as the JSON-property name and the value-attribute as the corresponding value."
      },
      "SubmodelElementListValue": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/SubmodelElementValue"
        }
      },
      "OperationRequest": {
        "type": "object",
        "properties": {
          "inoutputArguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OperationVariable"
            }
          },
          "inputArguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OperationVariable"
            }
          },
          "clientTimeoutDuration": {
            "pattern": "^(-?)P(?=.)((\\d+)Y)?((\\d+)M)?((\\d+)D)?(T(?=.)((\\d+)H)?((\\d+)M)?(\\d*(\\.\\d+)?S)?)?$",
            "type": "string"
          }
        }
      },
      "OperationResult": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseOperationResult"
          },
          {
            "properties": {
              "inoutputArguments": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OperationVariable"
                }
              },
              "outputArguments": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OperationVariable"
                }
              }
            }
          }
        ]
      },
      "BaseOperationResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Result"
          },
          {
            "properties": {
              "executionState": {
                "$ref": "#/components/schemas/ExecutionState"
              },
              "success": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "ExecutionState": {
        "type": "string",
        "enum": [
          "Initiated",
          "Running",
          "Completed",
          "Canceled",
          "Failed",
          "Timeout"
        ]
      },
      "OperationRequestValueOnly": {
        "required": [
          "clientTimeoutDuration"
        ],
        "type": "object",
        "properties": {
          "inoutputArguments": {
            "$ref": "#/components/schemas/ValueOnly"
          },
          "inputArguments": {
            "$ref": "#/components/schemas/ValueOnly"
          },
          "clientTimeoutDuration": {
            "pattern": "^(-?)P(?=.)((\\d+)Y)?((\\d+)M)?((\\d+)D)?(T(?=.)((\\d+)H)?((\\d+)M)?(\\d*(\\.\\d+)?S)?)?$",
            "type": "string"
          }
        }
      },
      "OperationResultValueOnly": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseOperationResult"
          },
          {
            "properties": {
              "inoutputArguments": {
                "$ref": "#/components/schemas/ValueOnly"
              },
              "outputArguments": {
                "$ref": "#/components/schemas/ValueOnly"
              }
            }
          }
        ]
      },
      "Environment": {
        "type": "object",
        "properties": {
          "assetAdministrationShells": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetAdministrationShell"
            }
          },
          "submodels": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Submodel"
            }
          },
          "conceptDescriptions": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConceptDescription"
            }
          }
        }
      },
      "AssetAdministrationShell": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Identifiable"
          },
          {
            "$ref": "#/components/schemas/HasDataSpecification"
          },
          {
            "required": [
              "assetInformation"
            ],
            "properties": {
              "derivedFrom": {
                "$ref": "#/components/schemas/Reference"
              },
              "assetInformation": {
                "$ref": "#/components/schemas/AssetInformation"
              },
              "submodels": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Reference"
                }
              },
              "modelType": {
                "pattern": "AssetAdministrationShell",
                "type": "string"
              }
            }
          }
        ]
      },
      "AssetInformation": {
        "required": [
          "assetKind"
        ],
        "type": "object",
        "properties": {
          "assetKind": {
            "$ref": "#/components/schemas/AssetKind"
          },
          "globalAssetId": {
            "maxLength": 2000,
            "minLength": 1,
            "pattern": "^([\\t\\n\\r -퟿-�]|\\ud800[\\udc00-\\udfff]|[\\ud801-\\udbfe][\\udc00-\\udfff]|\\udbff[\\udc00-\\udfff])*$",
            "type": "string"
          },
          "specificAssetIds": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpecificAssetId"
            }
          },
          "assetType": {
            "maxLength": 2000,
            "minLength": 1,
            "pattern": "^([\\t\\n\\r -퟿-�]|\\ud800[\\udc00-\\udfff]|[\\ud801-\\udbfe][\\udc00-\\udfff]|\\udbff[\\udc00-\\udfff])*$",
            "type": "string"
          },
          "defaultThumbnail": {
            "$ref": "#/components/schemas/Resource"
          }
        }
      },
      "AssetKind": {
        "type": "string",
        "enum": [
          "Instance",
          "NotApplicable",
          "Type"
        ]
      },
      "Resource": {
        "required": [
          "path"
        ],
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "allOf": [
              {
                "maxLength": 2000,
                "minLength": 1
              },
              {
                "pattern": "^([\\t\\n\\r -퟿-�]|\\ud800[\\udc00-\\udfff]|[\\ud801-\\udbfe][\\udc00-\\udfff]|\\udbff[\\udc00-\\udfff])*$"
              },
              {
                "pattern": "^file:(//((localhost|(\\[((([0-9A-Fa-f]{1,4}:){6}([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|::([0-9A-Fa-f]{1,4}:){5}([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|([0-9A-Fa-f]{1,4})?::([0-9A-Fa-f]{1,4}:){4}([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})?::([0-9A-Fa-f]{1,4}:){3}([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9A-Fa-f]{1,4}:){2}[0-9A-Fa-f]{1,4})?::([0-9A-Fa-f]{1,4}:){2}([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9A-Fa-f]{1,4}:){3}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}:([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9A-Fa-f]{1,4}:){4}[0-9A-Fa-f]{1,4})?::([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9A-Fa-f]{1,4}:){5}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}|(([0-9A-Fa-f]{1,4}:){6}[0-9A-Fa-f]{1,4})?::)|[vV][0-9A-Fa-f]+\\.([a-zA-Z0-9\\-._~]|[!$&'()*+,;=]|:)+)\\]|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])|([a-zA-Z0-9\\-._~]|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=])*)))?/((([a-zA-Z0-9\\-._~]|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|[:@]))+(/(([a-zA-Z0-9\\-._~]|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|[:@]))*)*)?|/((([a-zA-Z0-9\\-._~]|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|[:@]))+(/(([a-zA-Z0-9\\-._~]|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|[:@]))*)*)?)$"
              }
            ]
          },
          "contentType": {
            "type": "string",
            "allOf": [
              {
                "maxLength": 100,
                "minLength": 1
              },
              {
                "pattern": "^([\\t\\n\\r -퟿-�]|\\ud800[\\udc00-\\udfff]|[\\ud801-\\udbfe][\\udc00-\\udfff]|\\udbff[\\udc00-\\udfff])*$"
              },
              {
                "pattern": "^([!#$%&'*+\\-.^_`|~0-9a-zA-Z])+/([!#$%&'*+\\-.^_`|~0-9a-zA-Z])+([ \\t]*;[ \\t]*([!#$%&'*+\\-.^_`|~0-9a-zA-Z])+=(([!#$%&'*+\\-.^_`|~0-9a-zA-Z])+|\"(([\\t !#-\\[\\]-~]|[-ÿ])|\\\\([\\t !-~]|[-ÿ]))*\"))*$"
              }
            ]
          }
        }
      },
      "ConceptDescription": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Identifiable"
          },
          {
            "$ref": "#/components/schemas/HasDataSpecification"
          },
          {
            "properties": {
              "isCaseOf": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Reference"
                }
              },
              "modelType": {
                "pattern": "ConceptDescription",
                "type": "string"
              }
            }
          }
        ]
      },
      "ServiceDescription": {
        "type": "object",
        "properties": {
          "profiles": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "https://admin-shell.io/aas/API/3/0/AssetAdministrationShellServiceSpecification/SSP-001",
                "https://admin-shell.io/aas/API/3/0/AssetAdministrationShellServiceSpecification/SSP-002",
                "https://admin-shell.io/aas/API/3/0/SubmodelServiceSpecification/SSP-001",
                "https://admin-shell.io/aas/API/3/0/SubmodelServiceSpecification/SSP-002",
                "https://admin-shell.io/aas/API/3/0/SubmodelServiceSpecification/SSP-003",
                "https://admin-shell.io/aas/API/3/0/AasxFileServerServiceSpecification/SSP-001",
                "https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRegistryServiceSpecification/SSP-001",
                "https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRegistryServiceSpecification/SSP-002",
                "https://admin-shell.io/aas/API/3/0/SubmodelRegistryServiceSpecification/SSP-001",
                "https://admin-shell.io/aas/API/3/0/SubmodelRegistryServiceSpecification/SSP-002",
                "https://admin-shell.io/aas/API/3/0/DiscoveryServiceSpecification/SSP-001",
                "https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRepositoryServiceSpecification/SSP-001",
                "https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRepositoryServiceSpecification/SSP-002",
                "https://admin-shell.io/aas/API/3/0/SubmodelRepositoryServiceSpecification/SSP-001",
                "https://admin-shell.io/aas/API/3/0/SubmodelRepositoryServiceSpecification/SSP-002",
                "https://admin-shell.io/aas/API/3/0/SubmodelRepositoryServiceSpecification/SSP-003",
                "https://admin-shell.io/aas/API/3/0/SubmodelRepositoryServiceSpecification/SSP-004",
                "https://admin-shell.io/aas/API/3/0/ConceptDescriptionServiceSpecification/SSP-001"
              ]
            }
          }
        },
        "description": "The Description object enables servers to present their capabilities to the clients, in particular which profiles they implement. At least one defined profile is required. Additional, proprietary attributes might be included. Nevertheless, the server must not expect that a regular client understands them.",
        "example": "{\n  \"profiles\": [\n    \"https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRegistryServiceSpecification/SSP-002\",\n    \"https://admin-shell.io/aas/API/3/0/SubmodelRegistryServiceSpecification/SSP-002\"\n  ]\n}"
      },
      "idShortPath_attachment_body": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string"
          },
          "file": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "PagedResult_paging_metadata": {
        "type": "object",
        "properties": {
          "cursor": {
            "type": "string",
            "example": "wJlCDLIl6KTWypN7T6vc6nWEmEYe99Hjf1XY1xmqV-M=#"
          }
        }
      }
    },
    "responses": {
      "bad-request": {
        "description": "Bad Request, e.g. the request parameters of the format of the request body is wrong.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Result"
            }
          }
        }
      },
      "unauthorized": {
        "description": "Unauthorized, e.g. the server refused the authorization attempt.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Result"
            }
          }
        }
      },
      "forbidden": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Result"
            }
          }
        }
      },
      "internal-server-error": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Result"
            }
          }
        }
      },
      "default": {
        "description": "Default error handling for unmentioned status codes",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Result"
            }
          }
        }
      },
      "conflict": {
        "description": "Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Result"
            }
          }
        }
      },
      "not-found": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Result"
            }
          }
        }
      },
      "accepted": {
        "description": "The server has accepted the request.",
        "headers": {
          "Location": {
            "description": "The URL where the client can find more information about the request.",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "found": {
        "description": "The target resource is available but at a different location.",
        "headers": {
          "Location": {
            "description": "The URL where the client can find the target resource.",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "parameters": {
      "SemanticId": {
        "name": "semanticId",
        "in": "query",
        "description": "The value of the semantic id reference (BASE64-URL-encoded)",
        "schema": {
          "maxLength": 3072,
          "minLength": 1,
          "type": "string"
        }
      },
      "IdShort": {
        "name": "idShort",
        "in": "query",
        "description": "The Asset Administration Shell’s IdShort",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "Limit": {
        "name": "limit",
        "in": "query",
        "description": "The maximum number of elements in the response array",
        "required": false,
        "schema": {
          "minimum": 1,
          "type": "integer"
        }
      },
      "Cursor": {
        "name": "cursor",
        "in": "query",
        "description": "A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "Level": {
        "name": "level",
        "in": "query",
        "description": "Determines the structural depth of the respective resource content",
        "required": false,
        "schema": {
          "type": "string",
          "default": "deep",
          "enum": [
            "deep",
            "core"
          ]
        }
      },
      "Extent": {
        "name": "extent",
        "in": "query",
        "description": "Determines to which extent the resource is being serialized",
        "required": false,
        "schema": {
          "type": "string",
          "default": "withoutBlobValue",
          "enum": [
            "withBlobValue",
            "withoutBlobValue"
          ]
        }
      },
      "SubmodelIdentifier": {
        "name": "submodelIdentifier",
        "in": "path",
        "description": "The Submodel’s unique id (UTF8-BASE64-URL-encoded)",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string",
          "format": "byte"
        }
      },
      "IdShortPath": {
        "name": "idShortPath",
        "in": "path",
        "description": "IdShort path to the submodel element (dot-separated)",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "AssetAdministrationShellIdentifier": {
        "name": "aasIdentifier",
        "in": "path",
        "description": "The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string",
          "format": "byte"
        }
      },
      "HandleId": {
        "name": "handleId",
        "in": "path",
        "description": "The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string",
          "format": "byte"
        }
      }
    }
  }
}