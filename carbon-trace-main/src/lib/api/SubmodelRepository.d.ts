/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/submodels": {
    /** Returns all Submodels */
    get: operations["GetAllSubmodels"];
    /** Creates a new Submodel */
    post: operations["PostSubmodel"];
  };
  "/submodels/$metadata": {
    /** Returns the metadata attributes of all Submodels */
    get: operations["GetAllSubmodels-Metadata"];
  };
  "/submodels/$value": {
    /** Returns all Submodels in their ValueOnly representation */
    get: operations["GetAllSubmodels-ValueOnly"];
  };
  "/submodels/$reference": {
    /** Returns the References for all Submodels */
    get: operations["GetAllSubmodels-Reference"];
  };
  "/submodels/$path": {
    /** Returns all Submodels in the Path notation */
    get: operations["GetAllSubmodels-Path"];
  };
  "/submodels/{submodelIdentifier}": {
    /** Returns a specific Submodel */
    get: operations["GetSubmodelById"];
    /** Updates an existing Submodel */
    put: operations["PutSubmodelById"];
    /** Deletes a Submodel */
    delete: operations["DeleteSubmodelById"];
    /** Updates an existing Submodel */
    patch: operations["PatchSubmodelById"];
  };
  "/submodels/{submodelIdentifier}/$metadata": {
    /** Returns the metadata attributes of a specific Submodel */
    get: operations["GetSubmodelById-Metadata"];
    /** Updates the metadata attributes of an existing Submodel */
    patch: operations["PatchSubmodelById-Metadata"];
  };
  "/submodels/{submodelIdentifier}/$value": {
    /** Returns a specific Submodel in the ValueOnly representation */
    get: operations["GetSubmodelById-ValueOnly"];
    /** Updates the values of an existing Submodel */
    patch: operations["PatchSubmodelById-ValueOnly"];
  };
  "/submodels/{submodelIdentifier}/$reference": {
    /** Returns the Reference of a specific Submodel */
    get: operations["GetSubmodelById-Reference"];
  };
  "/submodels/{submodelIdentifier}/$path": {
    /** Returns a specific Submodel in the Path notation */
    get: operations["GetSubmodelById-Path"];
  };
  "/submodels/{submodelIdentifier}/submodel-elements": {
    /** Returns all submodel elements including their hierarchy */
    get: operations["GetAllSubmodelElements"];
    /** Creates a new submodel element */
    post: operations["PostSubmodelElement_SubmodelRepo"];
  };
  "/submodels/{submodelIdentifier}/submodel-elements/$metadata": {
    /** Returns the metadata attributes of all submodel elements including their hierarchy */
    get: operations["GetAllSubmodelElements-Metadata_SubmodelRepo"];
  };
  "/submodels/{submodelIdentifier}/submodel-elements/$value": {
    /** Returns all submodel elements including their hierarchy in the ValueOnly representation */
    get: operations["GetAllSubmodelElements-ValueOnly_SubmodelRepo"];
  };
  "/submodels/{submodelIdentifier}/submodel-elements/$reference": {
    /** Returns the References of all submodel elements */
    get: operations["GetAllSubmodelElements-Reference_SubmodelRepo"];
  };
  "/submodels/{submodelIdentifier}/submodel-elements/$path": {
    /** Returns all submodel elements including their hierarchy in the Path notation */
    get: operations["GetAllSubmodelElements-Path_SubmodelRepo"];
  };
  "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}": {
    /** Returns a specific submodel element from the Submodel at a specified path */
    get: operations["GetSubmodelElementByPath_SubmodelRepo"];
    /** Updates an existing submodel element at a specified path within submodel elements hierarchy */
    put: operations["PutSubmodelElementByPath_SubmodelRepo"];
    /** Creates a new submodel element at a specified path within submodel elements hierarchy */
    post: operations["PostSubmodelElementByPath_SubmodelRepo"];
    /** Deletes a submodel element at a specified path within the submodel elements hierarchy */
    delete: operations["DeleteSubmodelElementByPath_SubmodelRepo"];
    /** Updates an existing SubmodelElement */
    patch: operations["PatchSubmodelElementByPath_SubmodelRepo"];
  };
  "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$metadata": {
    /** Returns the matadata attributes of a specific submodel element from the Submodel at a specified path */
    get: operations["GetSubmodelElementByPath-Metadata_SubmodelRepo"];
    /** Updates the metadata attributes an existing SubmodelElement */
    patch: operations["PatchSubmodelElementByPath-Metadata_SubmodelRepo"];
  };
  "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$value": {
    /** Returns a specific submodel element from the Submodel at a specified path in the ValueOnly representation */
    get: operations["GetSubmodelElementByPath-ValueOnly_SubmodelRepo"];
    /** Updates the value of an existing SubmodelElement */
    patch: operations["PatchSubmodelElementByPath-ValueOnly_SubmodelRepo"];
  };
  "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$reference": {
    /** Returns the Referene of a specific submodel element from the Submodel at a specified path */
    get: operations["GetSubmodelElementByPath-Reference_SubmodelRepo"];
  };
  "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$path": {
    /** Returns a specific submodel element from the Submodel at a specified path in the Path notation */
    get: operations["GetSubmodelElementByPath-Path_SubmodelRepo"];
  };
  "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment": {
    /** Downloads file content from a specific submodel element from the Submodel at a specified path */
    get: operations["GetFileByPath_SubmodelRepo"];
    /** Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy */
    put: operations["PutFileByPath_SubmodelRepo"];
    /** Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy */
    delete: operations["DeleteFileByPath_SubmodelRepo"];
  };
  "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke": {
    /** Synchronously or asynchronously invokes an Operation at a specified path */
    post: operations["InvokeOperation_SubmodelRepo"];
  };
  "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke/$value": {
    /** Synchronously or asynchronously invokes an Operation at a specified path */
    post: operations["InvokeOperation-ValueOnly"];
  };
  "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-async": {
    /** Asynchronously invokes an Operation at a specified path */
    post: operations["InvokeOperationAsync"];
  };
  "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-async/$value": {
    /** Asynchronously invokes an Operation at a specified path */
    post: operations["InvokeOperationAsync-ValueOnly"];
  };
  "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-status/{handleId}": {
    /** Returns the status of an asynchronously invoked Operation */
    get: operations["GetOperationAsyncStatus"];
  };
  "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}": {
    /** Returns the Operation result of an asynchronously invoked Operation */
    get: operations["GetOperationAsyncResult"];
  };
  "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}/$value": {
    /** Returns the Operation result of an asynchronously invoked Operation */
    get: operations["GetOperationAsyncResult-ValueOnly"];
  };
  "/serialization": {
    /** Returns an appropriate serialization based on the specified format (see SerializationFormat) */
    get: operations["GenerateSerializationByIds"];
  };
  "/description": {
    /** Returns the self-describing information of a network resource (ServiceDescription) */
    get: operations["GetDescription"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    GetSubmodelsResult: components["schemas"]["PagedResult"] & {
      result?: components["schemas"]["Submodel"][];
    };
    PagedResult: {
      paging_metadata?: components["schemas"]["PagedResult_paging_metadata"];
    };
    Submodel: components["schemas"]["Identifiable"] & components["schemas"]["HasKind"] & components["schemas"]["HasSemantics"] & components["schemas"]["Qualifiable"] & components["schemas"]["HasDataSpecification"] & {
      submodelElements?: components["schemas"]["SubmodelElement_choice"][];
      modelType?: string;
    };
    Identifiable: components["schemas"]["Referable"] & {
      administration?: components["schemas"]["AdministrativeInformation"];
      id: string;
    };
    Referable: components["schemas"]["HasExtensions"] & {
      category?: string;
      idShort?: string;
      displayName?: components["schemas"]["LangStringNameType"][];
      description?: components["schemas"]["LangStringTextType"][];
      modelType: components["schemas"]["ModelType"];
    };
    HasExtensions: {
      extensions?: components["schemas"]["Extension"][];
    };
    Extension: components["schemas"]["HasSemantics"] & {
      name: string;
      valueType?: components["schemas"]["DataTypeDefXsd"];
      value?: string;
      refersTo?: components["schemas"]["Reference"][];
    };
    HasSemantics: {
      semanticId?: components["schemas"]["Reference"];
      supplementalSemanticIds?: components["schemas"]["Reference"][];
    };
    Reference: components["schemas"]["ReferenceParent"] & {
      referredSemanticId?: components["schemas"]["ReferenceParent"];
    };
    ReferenceParent: {
      type: components["schemas"]["ReferenceTypes"];
      keys: components["schemas"]["Key"][];
    };
    /** @enum {string} */
    ReferenceTypes: "ExternalReference" | "ModelReference";
    Key: {
      type: components["schemas"]["KeyTypes"];
      value: string;
    };
    /** @enum {string} */
    KeyTypes: "AnnotatedRelationshipElement" | "AssetAdministrationShell" | "BasicEventElement" | "Blob" | "Capability" | "ConceptDescription" | "DataElement" | "Entity" | "EventElement" | "File" | "FragmentReference" | "GlobalReference" | "Identifiable" | "MultiLanguageProperty" | "Operation" | "Property" | "Range" | "Referable" | "ReferenceElement" | "RelationshipElement" | "Submodel" | "SubmodelElement" | "SubmodelElementCollection" | "SubmodelElementList";
    /** @enum {string} */
    DataTypeDefXsd: "xs:anyURI" | "xs:base64Binary" | "xs:boolean" | "xs:byte" | "xs:date" | "xs:dateTime" | "xs:decimal" | "xs:double" | "xs:duration" | "xs:float" | "xs:gDay" | "xs:gMonth" | "xs:gMonthDay" | "xs:gYear" | "xs:gYearMonth" | "xs:hexBinary" | "xs:int" | "xs:integer" | "xs:long" | "xs:negativeInteger" | "xs:nonNegativeInteger" | "xs:nonPositiveInteger" | "xs:positiveInteger" | "xs:short" | "xs:string" | "xs:time" | "xs:unsignedByte" | "xs:unsignedInt" | "xs:unsignedLong" | "xs:unsignedShort";
    LangStringNameType: components["schemas"]["AbstractLangString"] & {
      text?: unknown;
    };
    AbstractLangString: {
      language: string;
      text: string;
    };
    LangStringTextType: components["schemas"]["AbstractLangString"] & {
      text?: unknown;
    };
    /** @enum {string} */
    ModelType: "AnnotatedRelationshipElement" | "AssetAdministrationShell" | "BasicEventElement" | "Blob" | "Capability" | "ConceptDescription" | "DataSpecificationIec61360" | "Entity" | "File" | "MultiLanguageProperty" | "Operation" | "Property" | "Range" | "ReferenceElement" | "RelationshipElement" | "Submodel" | "SubmodelElementCollection" | "SubmodelElementList";
    AdministrativeInformation: components["schemas"]["HasDataSpecification"] & {
      version?: string;
      revision?: string;
      creator?: components["schemas"]["Reference"];
      templateId?: string;
    };
    HasDataSpecification: {
      embeddedDataSpecifications?: components["schemas"]["EmbeddedDataSpecification"][];
    };
    EmbeddedDataSpecification: {
      dataSpecification: components["schemas"]["Reference"];
      dataSpecificationContent: components["schemas"]["DataSpecificationContent_choice"];
    };
    DataSpecificationContent_choice: components["schemas"]["DataSpecificationIec61360"];
    DataSpecificationIec61360: components["schemas"]["DataSpecificationContent"] & {
      preferredName: components["schemas"]["LangStringPreferredNameTypeIec61360"][];
      shortName?: components["schemas"]["LangStringShortNameTypeIec61360"][];
      unit?: string;
      unitId?: components["schemas"]["Reference"];
      sourceOfDefinition?: string;
      symbol?: string;
      dataType?: components["schemas"]["DataTypeIec61360"];
      definition?: components["schemas"]["LangStringDefinitionTypeIec61360"][];
      valueFormat?: string;
      valueList?: components["schemas"]["ValueList"];
      value?: string;
      levelType?: components["schemas"]["LevelType"];
      modelType?: string;
    };
    DataSpecificationContent: {
      modelType: components["schemas"]["ModelType"];
    };
    LangStringPreferredNameTypeIec61360: components["schemas"]["AbstractLangString"] & {
      text?: unknown;
    };
    LangStringShortNameTypeIec61360: components["schemas"]["AbstractLangString"] & {
      text?: unknown;
    };
    /** @enum {string} */
    DataTypeIec61360: "BLOB" | "BOOLEAN" | "DATE" | "FILE" | "HTML" | "INTEGER_COUNT" | "INTEGER_CURRENCY" | "INTEGER_MEASURE" | "IRDI" | "IRI" | "RATIONAL" | "RATIONAL_MEASURE" | "REAL_COUNT" | "REAL_CURRENCY" | "REAL_MEASURE" | "STRING" | "STRING_TRANSLATABLE" | "TIME" | "TIMESTAMP";
    LangStringDefinitionTypeIec61360: components["schemas"]["AbstractLangString"] & {
      text?: unknown;
    };
    ValueList: {
      valueReferencePairs: components["schemas"]["ValueReferencePair"][];
    };
    ValueReferencePair: {
      value: string;
      valueId: components["schemas"]["Reference"];
    };
    LevelType: {
      min: boolean;
      nom: boolean;
      typ: boolean;
      max: boolean;
    };
    HasKind: {
      kind?: components["schemas"]["ModellingKind"];
    };
    /** @enum {string} */
    ModellingKind: "Instance" | "Template";
    Qualifiable: {
      qualifiers?: components["schemas"]["Qualifier"][];
      modelType: components["schemas"]["ModelType"];
    };
    Qualifier: components["schemas"]["HasSemantics"] & {
      kind?: components["schemas"]["QualifierKind"];
      type: string;
      valueType: components["schemas"]["DataTypeDefXsd"];
      value?: string;
      valueId?: components["schemas"]["Reference"];
    };
    /** @enum {string} */
    QualifierKind: "ConceptQualifier" | "TemplateQualifier" | "ValueQualifier";
    SubmodelElement_choice: components["schemas"]["RelationshipElement"] | components["schemas"]["AnnotatedRelationshipElement"] | components["schemas"]["BasicEventElement"] | components["schemas"]["Blob"] | components["schemas"]["Capability"] | components["schemas"]["Entity"] | components["schemas"]["File"] | components["schemas"]["MultiLanguageProperty"] | components["schemas"]["Operation"] | components["schemas"]["Property"] | components["schemas"]["Range"] | components["schemas"]["ReferenceElement"] | components["schemas"]["SubmodelElementCollection"] | components["schemas"]["SubmodelElementList"];
    RelationshipElement: components["schemas"]["RelationshipElement_abstract"] & {
      modelType?: string;
    };
    RelationshipElement_abstract: components["schemas"]["SubmodelElement"] & {
      first: components["schemas"]["Reference"];
      second: components["schemas"]["Reference"];
    };
    SubmodelElement: components["schemas"]["Referable"] & components["schemas"]["HasSemantics"] & components["schemas"]["Qualifiable"] & components["schemas"]["HasDataSpecification"];
    AnnotatedRelationshipElement: components["schemas"]["RelationshipElement_abstract"] & {
      annotations?: components["schemas"]["DataElement_choice"][];
      modelType?: string;
    };
    DataElement_choice: components["schemas"]["Blob"] | components["schemas"]["File"] | components["schemas"]["MultiLanguageProperty"] | components["schemas"]["Property"] | components["schemas"]["Range"] | components["schemas"]["ReferenceElement"];
    Blob: components["schemas"]["DataElement"] & {
      /** Format: byte */
      value?: string;
      contentType: string;
      modelType?: string;
    };
    DataElement: components["schemas"]["SubmodelElement"];
    File: components["schemas"]["DataElement"] & {
      value?: string;
      contentType: string;
      modelType?: string;
    };
    MultiLanguageProperty: components["schemas"]["DataElement"] & {
      value?: components["schemas"]["LangStringTextType"][];
      valueId?: components["schemas"]["Reference"];
      modelType?: string;
    };
    Property: components["schemas"]["DataElement"] & {
      valueType: components["schemas"]["DataTypeDefXsd"];
      value?: string;
      valueId?: components["schemas"]["Reference"];
      modelType?: string;
    };
    Range: components["schemas"]["DataElement"] & {
      valueType: components["schemas"]["DataTypeDefXsd"];
      min?: string;
      max?: string;
      modelType?: string;
    };
    ReferenceElement: components["schemas"]["DataElement"] & {
      value?: components["schemas"]["Reference"];
      modelType?: string;
    };
    BasicEventElement: components["schemas"]["EventElement"] & {
      observed: components["schemas"]["Reference"];
      direction: components["schemas"]["Direction"];
      state: components["schemas"]["StateOfEvent"];
      messageTopic?: string;
      messageBroker?: components["schemas"]["Reference"];
      lastUpdate?: string;
      minInterval?: string;
      maxInterval?: string;
      modelType?: string;
    };
    EventElement: components["schemas"]["SubmodelElement"];
    /** @enum {string} */
    Direction: "input" | "output";
    /** @enum {string} */
    StateOfEvent: "off" | "on";
    Capability: components["schemas"]["SubmodelElement"] & {
      modelType?: string;
    };
    Entity: components["schemas"]["SubmodelElement"] & {
      statements?: components["schemas"]["SubmodelElement_choice"][];
      entityType: components["schemas"]["EntityType"];
      globalAssetId?: string;
      specificAssetIds?: components["schemas"]["SpecificAssetId"][];
      modelType?: string;
    };
    /** @enum {string} */
    EntityType: "CoManagedEntity" | "SelfManagedEntity";
    SpecificAssetId: components["schemas"]["HasSemantics"] & {
      name: string;
      value: string;
      externalSubjectId?: components["schemas"]["Reference"];
    };
    Operation: components["schemas"]["SubmodelElement"] & {
      inputVariables?: components["schemas"]["OperationVariable"][];
      outputVariables?: components["schemas"]["OperationVariable"][];
      inoutputVariables?: components["schemas"]["OperationVariable"][];
      modelType?: string;
    };
    OperationVariable: {
      value: components["schemas"]["SubmodelElement_choice"];
    };
    SubmodelElementCollection: components["schemas"]["SubmodelElement"] & {
      value?: components["schemas"]["SubmodelElement_choice"][];
      modelType?: string;
    };
    SubmodelElementList: components["schemas"]["SubmodelElement"] & {
      orderRelevant?: boolean;
      semanticIdListElement?: components["schemas"]["Reference"];
      typeValueListElement: components["schemas"]["AasSubmodelElements"];
      valueTypeListElement?: components["schemas"]["DataTypeDefXsd"];
      value?: components["schemas"]["SubmodelElement_choice"][];
      modelType?: string;
    };
    /** @enum {string} */
    AasSubmodelElements: "AnnotatedRelationshipElement" | "BasicEventElement" | "Blob" | "Capability" | "DataElement" | "Entity" | "EventElement" | "File" | "MultiLanguageProperty" | "Operation" | "Property" | "Range" | "ReferenceElement" | "RelationshipElement" | "SubmodelElement" | "SubmodelElementCollection" | "SubmodelElementList";
    Result: {
      messages?: components["schemas"]["Message"][];
    };
    Message: {
      code?: string;
      correlationId?: string;
      /** @enum {string} */
      messageType?: "Undefined" | "Info" | "Warning" | "Error" | "Exception";
      text?: string;
      timestamp?: string;
    };
    GetSubmodelsMetadataResult: components["schemas"]["PagedResult"] & {
      result?: components["schemas"]["SubmodelMetadata"][];
    };
    SubmodelMetadata: components["schemas"]["Identifiable"] & components["schemas"]["HasDataSpecification"] & components["schemas"]["Qualifiable"] & components["schemas"]["HasSemantics"] & components["schemas"]["HasKind"];
    GetSubmodelsValueResult: components["schemas"]["PagedResult"] & {
      result?: components["schemas"]["SubmodelValue"][];
    };
    SubmodelValue: {
      submodelElements?: components["schemas"]["SubmodelElement"][];
    };
    GetReferencesResult: components["schemas"]["PagedResult"] & {
      result?: components["schemas"]["Reference"][];
    };
    GetPathItemsResult: components["schemas"]["PagedResult"] & {
      result?: components["schemas"]["PathItem"][];
    };
    PathItem: string;
    GetSubmodelElementsResult: components["schemas"]["PagedResult"] & {
      result?: components["schemas"]["SubmodelElement"][];
    };
    GetSubmodelElementsMetadataResult: components["schemas"]["PagedResult"] & {
      result?: components["schemas"]["SubmodelElementMetadata"][];
    };
    SubmodelElementMetadata: components["schemas"]["BlobMetadata"] | components["schemas"]["FileMetadata"] | components["schemas"]["CapabilityMetadata"] | components["schemas"]["EntityMetadata"] | components["schemas"]["BasicEventElementMetadata"] | components["schemas"]["MultiLanguagePropertyMetadata"] | components["schemas"]["OperationMetadata"] | components["schemas"]["PropertyMetadata"] | components["schemas"]["RangeMetadata"] | components["schemas"]["ReferenceElementMetadata"] | components["schemas"]["AnnotatedRelationshipElementMetadata"] | components["schemas"]["RelationshipElementMetadata"] | components["schemas"]["SubmodelElementListMetadata"] | components["schemas"]["SubmodelElementCollectionMetadata"];
    SubmodelElementAttributes: components["schemas"]["Referable"] & components["schemas"]["HasDataSpecification"] & components["schemas"]["HasSemantics"] & components["schemas"]["Qualifiable"] & components["schemas"]["HasKind"];
    BlobMetadata: components["schemas"]["Referable"] & components["schemas"]["HasDataSpecification"] & components["schemas"]["HasSemantics"] & components["schemas"]["Qualifiable"] & components["schemas"]["HasKind"];
    FileMetadata: components["schemas"]["SubmodelElementAttributes"];
    CapabilityMetadata: components["schemas"]["SubmodelElementAttributes"];
    EntityMetadata: components["schemas"]["SubmodelElementAttributes"];
    BasicEventElementMetadata: components["schemas"]["SubmodelElementAttributes"] & {
      direction?: components["schemas"]["Direction"];
      state?: components["schemas"]["StateOfEvent"];
      messageTopic?: string;
      messageBroker?: components["schemas"]["Reference"];
      lastUpdate?: string;
      minInterval?: string;
      maxInterval?: string;
    };
    MultiLanguagePropertyMetadata: components["schemas"]["SubmodelElementAttributes"];
    OperationMetadata: components["schemas"]["SubmodelElementAttributes"];
    PropertyMetadata: {
      valueType?: components["schemas"]["DataTypeDefXsd"];
    } & components["schemas"]["SubmodelElementAttributes"];
    RangeMetadata: {
      valueType?: components["schemas"]["DataTypeDefXsd"];
    } & components["schemas"]["SubmodelElementAttributes"];
    ReferenceElementMetadata: components["schemas"]["SubmodelElementAttributes"];
    AnnotatedRelationshipElementMetadata: components["schemas"]["Referable"] & components["schemas"]["HasDataSpecification"] & components["schemas"]["HasSemantics"] & components["schemas"]["Qualifiable"] & components["schemas"]["HasKind"];
    RelationshipElementMetadata: components["schemas"]["SubmodelElementAttributes"];
    SubmodelElementListMetadata: {
      orderRelevant?: boolean;
      semanticIdListElement?: components["schemas"]["Reference"];
      typeValueListElement?: components["schemas"]["ModelType"];
      valueTypeListElement?: components["schemas"]["DataTypeDefXsd"];
    } & components["schemas"]["SubmodelElementAttributes"];
    SubmodelElementCollectionMetadata: components["schemas"]["SubmodelElementAttributes"];
    GetSubmodelElementsValueResult: components["schemas"]["PagedResult"] & {
      result?: components["schemas"]["SubmodelElementValue"][];
    };
    SubmodelElementValue: components["schemas"]["BasicEventElementValue"] | components["schemas"]["PropertyValue"] | components["schemas"]["MultiLanguagePropertyValue"] | components["schemas"]["BlobValue"] | components["schemas"]["FileValue"] | components["schemas"]["RangeValue"] | components["schemas"]["ReferenceElementValue"] | components["schemas"]["RelationshipElementValue"] | components["schemas"]["AnnotatedRelationshipElementValue"] | components["schemas"]["EntityValue"] | components["schemas"]["SubmodelElementCollectionValue"] | components["schemas"]["SubmodelElementListValue"];
    BasicEventElementValue: {
      observed: components["schemas"]["ReferenceValue"];
    };
    ReferenceValue: {
      type?: components["schemas"]["ReferenceTypes"];
      keys?: components["schemas"]["Key"][];
    };
    PropertyValue: components["schemas"]["StringValue"] | components["schemas"]["NumberValue"] | components["schemas"]["BooleanValue"];
    StringValue: string;
    NumberValue: number;
    BooleanValue: boolean;
    /** @description Since patternProperties and propertyNames are not supported by OpenApi yet, the ValueOnly serialization for this elements works with the key-attribute as the JSON-property name and the value-attribute as the corresponding value. */
    MultiLanguagePropertyValue: Record<string, never>;
    BlobValue: {
      contentType: string;
      value: string;
    };
    FileValue: {
      contentType: string;
      value: string;
    };
    RangeValue: {
      max: number;
      min: number;
    };
    ReferenceElementValue: {
      type?: components["schemas"]["ReferenceTypes"];
      keys?: components["schemas"]["Key"][];
    };
    RelationshipElementValue: {
      first: components["schemas"]["ReferenceValue"];
      second: components["schemas"]["ReferenceValue"];
    };
    AnnotatedRelationshipElementValue: {
      first: components["schemas"]["ReferenceValue"];
      second: components["schemas"]["ReferenceValue"];
      annotations?: components["schemas"]["ValueOnly"][];
    };
    /** @description The ValueOnly serialization of submodel elements (patternProperties and propertyNames will be supported propably with OpenApi 3.1). The full description of the generic JSON validation schema for the ValueOnly-serialization can be found in chapter 11.4.3 in Details of the Asset Administration Shell Part 2. */
    ValueOnly: Record<string, never>;
    EntityValue: {
      entityType: components["schemas"]["EntityType"];
      globalAssetId?: string;
      specificAssetIds?: components["schemas"]["SpecificAssetIdValue"][];
      statements: components["schemas"]["ValueOnly"][];
    };
    /** @description Since patternProperties and propertyNames are not supported by OpenApi yet, the ValueOnly serialization for this elements works with the key-attribute as the JSON-property name and the value-attribute as the corresponding value. */
    SpecificAssetIdValue: Record<string, never>;
    /** @description Since patternProperties and propertyNames are not supported by OpenApi yet, the ValueOnly serialization for this elements works with the key-attribute as the JSON-property name and the value-attribute as the corresponding value. */
    SubmodelElementCollectionValue: Record<string, never>;
    SubmodelElementListValue: components["schemas"]["SubmodelElementValue"][];
    OperationRequest: {
      inoutputArguments?: components["schemas"]["OperationVariable"][];
      inputArguments?: components["schemas"]["OperationVariable"][];
      clientTimeoutDuration?: string;
    };
    OperationResult: components["schemas"]["BaseOperationResult"] & {
      inoutputArguments?: components["schemas"]["OperationVariable"][];
      outputArguments?: components["schemas"]["OperationVariable"][];
    };
    BaseOperationResult: components["schemas"]["Result"] & {
      executionState?: components["schemas"]["ExecutionState"];
      success?: boolean;
    };
    /** @enum {string} */
    ExecutionState: "Initiated" | "Running" | "Completed" | "Canceled" | "Failed" | "Timeout";
    OperationRequestValueOnly: {
      inoutputArguments?: components["schemas"]["ValueOnly"];
      inputArguments?: components["schemas"]["ValueOnly"];
      clientTimeoutDuration: string;
    };
    OperationResultValueOnly: components["schemas"]["BaseOperationResult"] & {
      inoutputArguments?: components["schemas"]["ValueOnly"];
      outputArguments?: components["schemas"]["ValueOnly"];
    };
    Environment: {
      assetAdministrationShells?: components["schemas"]["AssetAdministrationShell"][];
      submodels?: components["schemas"]["Submodel"][];
      conceptDescriptions?: components["schemas"]["ConceptDescription"][];
    };
    AssetAdministrationShell: components["schemas"]["Identifiable"] & components["schemas"]["HasDataSpecification"] & {
      derivedFrom?: components["schemas"]["Reference"];
      assetInformation: components["schemas"]["AssetInformation"];
      submodels?: components["schemas"]["Reference"][];
      modelType?: string;
    };
    AssetInformation: {
      assetKind: components["schemas"]["AssetKind"];
      globalAssetId?: string;
      specificAssetIds?: components["schemas"]["SpecificAssetId"][];
      assetType?: string;
      defaultThumbnail?: components["schemas"]["Resource"];
    };
    /** @enum {string} */
    AssetKind: "Instance" | "NotApplicable" | "Type";
    Resource: {
      path: string;
      contentType?: string;
    };
    ConceptDescription: components["schemas"]["Identifiable"] & components["schemas"]["HasDataSpecification"] & {
      isCaseOf?: components["schemas"]["Reference"][];
      modelType?: string;
    };
    /**
     * @description The Description object enables servers to present their capabilities to the clients, in particular which profiles they implement. At least one defined profile is required. Additional, proprietary attributes might be included. Nevertheless, the server must not expect that a regular client understands them.
     * @example {
     *   "profiles": [
     *     "https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRegistryServiceSpecification/SSP-002",
     *     "https://admin-shell.io/aas/API/3/0/SubmodelRegistryServiceSpecification/SSP-002"
     *   ]
     * }
     */
    ServiceDescription: {
      profiles?: ("https://admin-shell.io/aas/API/3/0/AssetAdministrationShellServiceSpecification/SSP-001" | "https://admin-shell.io/aas/API/3/0/AssetAdministrationShellServiceSpecification/SSP-002" | "https://admin-shell.io/aas/API/3/0/SubmodelServiceSpecification/SSP-001" | "https://admin-shell.io/aas/API/3/0/SubmodelServiceSpecification/SSP-002" | "https://admin-shell.io/aas/API/3/0/SubmodelServiceSpecification/SSP-003" | "https://admin-shell.io/aas/API/3/0/AasxFileServerServiceSpecification/SSP-001" | "https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRegistryServiceSpecification/SSP-001" | "https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRegistryServiceSpecification/SSP-002" | "https://admin-shell.io/aas/API/3/0/SubmodelRegistryServiceSpecification/SSP-001" | "https://admin-shell.io/aas/API/3/0/SubmodelRegistryServiceSpecification/SSP-002" | "https://admin-shell.io/aas/API/3/0/DiscoveryServiceSpecification/SSP-001" | "https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRepositoryServiceSpecification/SSP-001" | "https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRepositoryServiceSpecification/SSP-002" | "https://admin-shell.io/aas/API/3/0/SubmodelRepositoryServiceSpecification/SSP-001" | "https://admin-shell.io/aas/API/3/0/SubmodelRepositoryServiceSpecification/SSP-002" | "https://admin-shell.io/aas/API/3/0/SubmodelRepositoryServiceSpecification/SSP-003" | "https://admin-shell.io/aas/API/3/0/SubmodelRepositoryServiceSpecification/SSP-004" | "https://admin-shell.io/aas/API/3/0/ConceptDescriptionServiceSpecification/SSP-001")[];
    };
    idShortPath_attachment_body: {
      fileName?: string;
      /** Format: binary */
      file?: string;
    };
    PagedResult_paging_metadata: {
      /** @example wJlCDLIl6KTWypN7T6vc6nWEmEYe99Hjf1XY1xmqV-M=# */
      cursor?: string;
    };
  };
  responses: {
    /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
    "bad-request": {
      content: {
        "application/json": components["schemas"]["Result"];
      };
    };
    /** @description Unauthorized, e.g. the server refused the authorization attempt. */
    unauthorized: {
      content: {
        "application/json": components["schemas"]["Result"];
      };
    };
    /** @description Forbidden */
    forbidden: {
      content: {
        "application/json": components["schemas"]["Result"];
      };
    };
    /** @description Internal Server Error */
    "internal-server-error": {
      content: {
        "application/json": components["schemas"]["Result"];
      };
    };
    /** @description Default error handling for unmentioned status codes */
    default: {
      content: {
        "application/json": components["schemas"]["Result"];
      };
    };
    /** @description Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request. */
    conflict: {
      content: {
        "application/json": components["schemas"]["Result"];
      };
    };
    /** @description Not Found */
    "not-found": {
      content: {
        "application/json": components["schemas"]["Result"];
      };
    };
    /** @description The server has accepted the request. */
    accepted: {
      headers: {
        /** @description The URL where the client can find more information about the request. */
        Location?: string;
      };
      content: never;
    };
    /** @description The target resource is available but at a different location. */
    found: {
      headers: {
        /** @description The URL where the client can find the target resource. */
        Location?: string;
      };
      content: never;
    };
  };
  parameters: {
    /** @description The value of the semantic id reference (BASE64-URL-encoded) */
    SemanticId?: string;
    /** @description The Asset Administration Shell’s IdShort */
    IdShort?: string;
    /** @description The maximum number of elements in the response array */
    Limit?: number;
    /** @description A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue */
    Cursor?: string;
    /** @description Determines the structural depth of the respective resource content */
    Level?: "deep" | "core";
    /** @description Determines to which extent the resource is being serialized */
    Extent?: "withBlobValue" | "withoutBlobValue";
    /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
    SubmodelIdentifier: string;
    /** @description IdShort path to the submodel element (dot-separated) */
    IdShortPath: string;
    /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
    AssetAdministrationShellIdentifier: string;
    /** @description The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded) */
    HandleId: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Returns all Submodels */
  GetAllSubmodels: {
    parameters: {
      query?: {
        /** @description The value of the semantic id reference (BASE64-URL-encoded) */
        semanticId?: string;
        /** @description The Asset Administration Shell’s IdShort */
        idShort?: string;
        /** @description The maximum number of elements in the response array */
        limit?: number;
        /** @description A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue */
        cursor?: string;
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep" | "core";
        /** @description Determines to which extent the resource is being serialized */
        extent?: "withBlobValue" | "withoutBlobValue";
      };
    };
    responses: {
      /** @description Requested Submodels */
      200: {
        content: {
          "application/json": components["schemas"]["GetSubmodelsResult"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Creates a new Submodel */
  PostSubmodel: {
    /** @description Submodel object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Submodel"];
      };
    };
    responses: {
      /** @description Submodel created successfully */
      201: {
        headers: {
          /** @description URL of the newly created resource */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["Submodel"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request. */
      409: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns the metadata attributes of all Submodels */
  "GetAllSubmodels-Metadata": {
    parameters: {
      query?: {
        /** @description The value of the semantic id reference (BASE64-URL-encoded) */
        semanticId?: string;
        /** @description The Asset Administration Shell’s IdShort */
        idShort?: string;
        /** @description The maximum number of elements in the response array */
        limit?: number;
        /** @description A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue */
        cursor?: string;
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep" | "core";
      };
    };
    responses: {
      /** @description Requested Submodels */
      200: {
        content: {
          "application/json": components["schemas"]["GetSubmodelsMetadataResult"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns all Submodels in their ValueOnly representation */
  "GetAllSubmodels-ValueOnly": {
    parameters: {
      query?: {
        /** @description The value of the semantic id reference (BASE64-URL-encoded) */
        semanticId?: string;
        /** @description The Asset Administration Shell’s IdShort */
        idShort?: string;
        /** @description The maximum number of elements in the response array */
        limit?: number;
        /** @description A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue */
        cursor?: string;
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep" | "core";
        /** @description Determines to which extent the resource is being serialized */
        extent?: "withBlobValue" | "withoutBlobValue";
      };
    };
    responses: {
      /** @description Requested Submodels */
      200: {
        content: {
          "application/json": components["schemas"]["GetSubmodelsValueResult"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns the References for all Submodels */
  "GetAllSubmodels-Reference": {
    parameters: {
      query?: {
        /** @description The value of the semantic id reference (BASE64-URL-encoded) */
        semanticId?: string;
        /** @description The Asset Administration Shell’s IdShort */
        idShort?: string;
        /** @description The maximum number of elements in the response array */
        limit?: number;
        /** @description A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue */
        cursor?: string;
        /** @description Determines the structural depth of the respective resource content */
        level?: "core";
      };
    };
    responses: {
      /** @description References of the requested Submodels */
      200: {
        content: {
          "application/json": components["schemas"]["GetReferencesResult"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns all Submodels in the Path notation */
  "GetAllSubmodels-Path": {
    parameters: {
      query?: {
        /** @description The value of the semantic id reference (BASE64-URL-encoded) */
        semanticId?: string;
        /** @description The Asset Administration Shell’s IdShort */
        idShort?: string;
        /** @description The maximum number of elements in the response array */
        limit?: number;
        /** @description A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue */
        cursor?: string;
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep" | "core";
      };
    };
    responses: {
      /** @description Requested Submodels */
      200: {
        content: {
          "application/json": components["schemas"]["GetPathItemsResult"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns a specific Submodel */
  GetSubmodelById: {
    parameters: {
      query?: {
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep" | "core";
        /** @description Determines to which extent the resource is being serialized */
        extent?: "withBlobValue" | "withoutBlobValue";
      };
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    responses: {
      /** @description Requested Submodel */
      200: {
        content: {
          "application/json": components["schemas"]["Submodel"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Updates an existing Submodel */
  PutSubmodelById: {
    parameters: {
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    /** @description Submodel object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Submodel"];
      };
    };
    responses: {
      /** @description Submodel updated successfully */
      204: {
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Deletes a Submodel */
  DeleteSubmodelById: {
    parameters: {
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    responses: {
      /** @description Submodel deleted successfully */
      204: {
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Updates an existing Submodel */
  PatchSubmodelById: {
    parameters: {
      query?: {
        /** @description Determines the structural depth of the respective resource content */
        level?: "core";
      };
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    /** @description Submodel object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Submodel"];
      };
    };
    responses: {
      /** @description Submodel updated successfully */
      204: {
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns the metadata attributes of a specific Submodel */
  "GetSubmodelById-Metadata": {
    parameters: {
      query?: {
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep" | "core";
      };
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    responses: {
      /** @description Requested Submodel in the metadata representation */
      200: {
        content: {
          "application/json": components["schemas"]["SubmodelMetadata"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Updates the metadata attributes of an existing Submodel */
  "PatchSubmodelById-Metadata": {
    parameters: {
      query?: {
        /** @description Determines the structural depth of the respective resource content */
        level?: "core";
      };
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    /** @description The metadata attributes of the Submodel object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubmodelMetadata"];
      };
    };
    responses: {
      /** @description Submodel updated successfully */
      204: {
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns a specific Submodel in the ValueOnly representation */
  "GetSubmodelById-ValueOnly": {
    parameters: {
      query?: {
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep" | "core";
        /** @description Determines to which extent the resource is being serialized */
        extent?: "withBlobValue" | "withoutBlobValue";
      };
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    responses: {
      /** @description Requested Submodel */
      200: {
        content: {
          "application/json": components["schemas"]["SubmodelValue"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Updates the values of an existing Submodel */
  "PatchSubmodelById-ValueOnly": {
    parameters: {
      query?: {
        /** @description Determines the structural depth of the respective resource content */
        level?: "core";
      };
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    /** @description Submodel object in its ValueOnly representation */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubmodelValue"];
      };
    };
    responses: {
      /** @description Submodel updated successfully */
      204: {
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns the Reference of a specific Submodel */
  "GetSubmodelById-Reference": {
    parameters: {
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    responses: {
      /** @description Requested Submodel */
      200: {
        content: {
          "application/json": components["schemas"]["Reference"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns a specific Submodel in the Path notation */
  "GetSubmodelById-Path": {
    parameters: {
      query?: {
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep" | "core";
      };
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    responses: {
      /** @description Requested Submodel */
      200: {
        content: {
          "application/json": components["schemas"]["PathItem"][];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns all submodel elements including their hierarchy */
  GetAllSubmodelElements: {
    parameters: {
      query?: {
        /** @description The maximum number of elements in the response array */
        limit?: number;
        /** @description A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue */
        cursor?: string;
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep" | "core";
        /** @description Determines to which extent the resource is being serialized */
        extent?: "withBlobValue" | "withoutBlobValue";
      };
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    responses: {
      /** @description List of found submodel elements */
      200: {
        content: {
          "application/json": components["schemas"]["GetSubmodelElementsResult"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Creates a new submodel element */
  PostSubmodelElement_SubmodelRepo: {
    parameters: {
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    /** @description Requested submodel element */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubmodelElement"];
      };
    };
    responses: {
      /** @description Submodel element created successfully */
      201: {
        headers: {
          /** @description URL of the newly created resource */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["SubmodelElement"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request. */
      409: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns the metadata attributes of all submodel elements including their hierarchy */
  "GetAllSubmodelElements-Metadata_SubmodelRepo": {
    parameters: {
      query?: {
        /** @description The maximum number of elements in the response array */
        limit?: number;
        /** @description A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue */
        cursor?: string;
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep" | "core";
      };
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    responses: {
      /** @description List of found submodel elements */
      200: {
        content: {
          "application/json": components["schemas"]["GetSubmodelElementsMetadataResult"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns all submodel elements including their hierarchy in the ValueOnly representation */
  "GetAllSubmodelElements-ValueOnly_SubmodelRepo": {
    parameters: {
      query?: {
        /** @description The maximum number of elements in the response array */
        limit?: number;
        /** @description A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue */
        cursor?: string;
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep" | "core";
        /** @description Determines to which extent the resource is being serialized */
        extent?: "withBlobValue" | "withoutBlobValue";
      };
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    responses: {
      /** @description List of found submodel elements */
      200: {
        content: {
          "application/json": components["schemas"]["GetSubmodelElementsValueResult"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns the References of all submodel elements */
  "GetAllSubmodelElements-Reference_SubmodelRepo": {
    parameters: {
      query?: {
        /** @description The maximum number of elements in the response array */
        limit?: number;
        /** @description A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue */
        cursor?: string;
        /** @description Determines the structural depth of the respective resource content */
        level?: "core";
      };
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    responses: {
      /** @description List of found submodel elements */
      200: {
        content: {
          "application/json": components["schemas"]["GetReferencesResult"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns all submodel elements including their hierarchy in the Path notation */
  "GetAllSubmodelElements-Path_SubmodelRepo": {
    parameters: {
      query?: {
        /** @description The maximum number of elements in the response array */
        limit?: number;
        /** @description A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue */
        cursor?: string;
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep" | "core";
      };
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    responses: {
      /** @description List of found submodel elements in the Path notation */
      200: {
        content: {
          "application/json": components["schemas"]["GetPathItemsResult"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns a specific submodel element from the Submodel at a specified path */
  GetSubmodelElementByPath_SubmodelRepo: {
    parameters: {
      query?: {
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep" | "core";
        /** @description Determines to which extent the resource is being serialized */
        extent?: "withBlobValue" | "withoutBlobValue";
      };
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    responses: {
      /** @description Requested submodel element */
      200: {
        content: {
          "application/json": components["schemas"]["SubmodelElement"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Updates an existing submodel element at a specified path within submodel elements hierarchy */
  PutSubmodelElementByPath_SubmodelRepo: {
    parameters: {
      query?: {
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep";
      };
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    /** @description Requested submodel element */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubmodelElement"];
      };
    };
    responses: {
      /** @description Submodel element updated successfully */
      204: {
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Creates a new submodel element at a specified path within submodel elements hierarchy */
  PostSubmodelElementByPath_SubmodelRepo: {
    parameters: {
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    /** @description Requested submodel element */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubmodelElement"];
      };
    };
    responses: {
      /** @description Submodel element created successfully */
      201: {
        headers: {
          /** @description URL of the newly created resource */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["SubmodelElement"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request. */
      409: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Deletes a submodel element at a specified path within the submodel elements hierarchy */
  DeleteSubmodelElementByPath_SubmodelRepo: {
    parameters: {
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    responses: {
      /** @description Submodel element deleted successfully */
      204: {
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Updates an existing SubmodelElement */
  PatchSubmodelElementByPath_SubmodelRepo: {
    parameters: {
      query?: {
        /** @description Determines the structural depth of the respective resource content */
        level?: "core";
      };
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    /** @description SubmodelElement object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubmodelElement"];
      };
    };
    responses: {
      /** @description SubmodelElement updated successfully */
      204: {
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns the matadata attributes of a specific submodel element from the Submodel at a specified path */
  "GetSubmodelElementByPath-Metadata_SubmodelRepo": {
    parameters: {
      query?: {
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep" | "core";
      };
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    responses: {
      /** @description Metadata attributes of the requested submodel element */
      200: {
        content: {
          "application/json": components["schemas"]["SubmodelElementMetadata"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Updates the metadata attributes an existing SubmodelElement */
  "PatchSubmodelElementByPath-Metadata_SubmodelRepo": {
    parameters: {
      query?: {
        /** @description Determines the structural depth of the respective resource content */
        level?: "core";
      };
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    /** @description Metadata attributes of the SubmodelElement */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubmodelElementMetadata"];
      };
    };
    responses: {
      /** @description SubmodelElement updated successfully */
      204: {
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns a specific submodel element from the Submodel at a specified path in the ValueOnly representation */
  "GetSubmodelElementByPath-ValueOnly_SubmodelRepo": {
    parameters: {
      query?: {
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep" | "core";
        /** @description Determines to which extent the resource is being serialized */
        extent?: "withBlobValue" | "withoutBlobValue";
      };
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    responses: {
      /** @description Requested submodel element */
      200: {
        content: {
          "application/json": components["schemas"]["SubmodelElementValue"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Updates the value of an existing SubmodelElement */
  "PatchSubmodelElementByPath-ValueOnly_SubmodelRepo": {
    parameters: {
      query?: {
        /** @description Determines the structural depth of the respective resource content */
        level?: "core";
      };
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    /** @description The SubmodelElement in its ValueOnly representation */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubmodelElementValue"];
      };
    };
    responses: {
      /** @description Submodel updated successfully */
      204: {
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns the Referene of a specific submodel element from the Submodel at a specified path */
  "GetSubmodelElementByPath-Reference_SubmodelRepo": {
    parameters: {
      query?: {
        /** @description Determines the structural depth of the respective resource content */
        level?: "core";
      };
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    responses: {
      /** @description Requested submodel element */
      200: {
        content: {
          "application/json": components["schemas"]["Reference"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns a specific submodel element from the Submodel at a specified path in the Path notation */
  "GetSubmodelElementByPath-Path_SubmodelRepo": {
    parameters: {
      query?: {
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep" | "core";
      };
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    responses: {
      /** @description Requested submodel element */
      200: {
        content: {
          "application/json": components["schemas"]["PathItem"][];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Downloads file content from a specific submodel element from the Submodel at a specified path */
  GetFileByPath_SubmodelRepo: {
    parameters: {
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    responses: {
      /** @description Requested file */
      200: {
        headers: {
          /**
           * @description In order to physically download the file usually set to attachment with a filename
           * @example attachment; filename="filename.jpg"
           */
          "Content-Disposition"?: string;
        };
        content: {
          "application/octet-stream": string;
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Method not allowed - Download only valid for File submodel element */
      405: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy */
  PutFileByPath_SubmodelRepo: {
    parameters: {
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    /** @description File to upload */
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["idShortPath_attachment_body"];
      };
    };
    responses: {
      /** @description Submodel element updated successfully */
      204: {
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Method not allowed - Upload only valid for File submodel element */
      405: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy */
  DeleteFileByPath_SubmodelRepo: {
    parameters: {
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    responses: {
      /** @description Submodel element updated successfully */
      200: {
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Synchronously or asynchronously invokes an Operation at a specified path */
  InvokeOperation_SubmodelRepo: {
    parameters: {
      query?: {
        /** @description Determines whether an operation invocation is performed asynchronously or synchronously */
        async?: boolean;
      };
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    /** @description Operation request object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["OperationRequest"];
      };
    };
    responses: {
      /** @description Operation result object */
      200: {
        content: {
          "application/json": components["schemas"]["OperationResult"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Method not allowed - Invoke only valid for Operation submodel element */
      405: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Synchronously or asynchronously invokes an Operation at a specified path */
  "InvokeOperation-ValueOnly": {
    parameters: {
      query?: {
        /** @description Determines whether an operation invocation is performed asynchronously or synchronously */
        async?: boolean;
      };
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    /** @description Operation request object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["OperationRequestValueOnly"];
      };
    };
    responses: {
      /** @description Operation result object */
      200: {
        content: {
          "application/json": components["schemas"]["OperationResultValueOnly"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Asynchronously invokes an Operation at a specified path */
  InvokeOperationAsync: {
    parameters: {
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    /** @description Operation request object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["OperationRequest"];
      };
    };
    responses: {
      /** @description The server has accepted the request. */
      202: {
        headers: {
          /** @description The URL where the client can find more information about the request. */
          Location?: string;
        };
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Method not allowed - Invoke only valid for Operation submodel element */
      405: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Asynchronously invokes an Operation at a specified path */
  "InvokeOperationAsync-ValueOnly": {
    parameters: {
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    /** @description Operation request object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["OperationRequestValueOnly"];
      };
    };
    responses: {
      /** @description The server has accepted the request. */
      202: {
        headers: {
          /** @description The URL where the client can find more information about the request. */
          Location?: string;
        };
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns the status of an asynchronously invoked Operation */
  GetOperationAsyncStatus: {
    parameters: {
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
        /** @description The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded) */
        handleId: string;
      };
    };
    responses: {
      /** @description Operation result object containing information that the 'executionState' is still 'Running' */
      200: {
        content: {
          "application/json": components["schemas"]["BaseOperationResult"];
        };
      };
      /** @description The target resource is available but at a different location. */
      302: {
        headers: {
          /** @description The URL where the client can find the target resource. */
          Location?: string;
        };
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns the Operation result of an asynchronously invoked Operation */
  GetOperationAsyncResult: {
    parameters: {
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
        /** @description The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded) */
        handleId: string;
      };
    };
    responses: {
      /** @description Operation result object */
      200: {
        content: {
          "application/json": components["schemas"]["OperationResult"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns the Operation result of an asynchronously invoked Operation */
  "GetOperationAsyncResult-ValueOnly": {
    parameters: {
      path: {
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
        /** @description The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded) */
        handleId: string;
      };
    };
    responses: {
      /** @description Value of the operation result object */
      200: {
        content: {
          "application/json": components["schemas"]["OperationResultValueOnly"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns an appropriate serialization based on the specified format (see SerializationFormat) */
  GenerateSerializationByIds: {
    parameters: {
      query?: {
        /** @description The Asset Administration Shells' unique ids (UTF8-BASE64-URL-encoded) */
        aasIds?: string[];
        /** @description The Submodels' unique ids (UTF8-BASE64-URL-encoded) */
        submodelIds?: string[];
        /** @description Include Concept Descriptions? */
        includeConceptDescriptions?: boolean;
      };
    };
    responses: {
      /** @description Requested serialization based on SerializationFormat */
      200: {
        content: {
          "application/asset-administration-shell-package+xml": string;
          "application/json": components["schemas"]["Environment"];
          "application/xml": components["schemas"]["Environment"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns the self-describing information of a network resource (ServiceDescription) */
  GetDescription: {
    responses: {
      /** @description Requested Description */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceDescription"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
}
