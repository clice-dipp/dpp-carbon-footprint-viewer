/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/external-shells/{url}": {
    /** @description Returns a all Asset Administration Shells contained in an environment from a url */
    get: operations["getExternalShell"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ApiError: {
      timestamp?: string;
      /** Format: int32 */
      status?: number;
      error?: string;
      trace?: string;
      message?: string;
      path?: string;
    };
    AdministrativeInformation: {
      version?: string;
      revision?: string;
      creator?: components["schemas"]["Reference"];
      templateId?: string;
      embeddedDataSpecifications?: components["schemas"]["EmbeddedDataSpecification"][];
    };
    AssetAdministrationShell: {
      submodels?: components["schemas"]["Reference"][];
      derivedFrom?: components["schemas"]["Reference"];
      assetInformation?: components["schemas"]["AssetInformation"];
      id?: string;
      administration?: components["schemas"]["AdministrativeInformation"];
      description?: components["schemas"]["LangStringTextType"][];
      displayName?: components["schemas"]["LangStringNameType"][];
      idShort?: string;
      category?: string;
      extensions?: components["schemas"]["Extension"][];
      embeddedDataSpecifications?: components["schemas"]["EmbeddedDataSpecification"][];
    };
    AssetInformation: {
      /** @enum {string} */
      assetKind?: "Instance" | "NotApplicable" | "Type";
      assetType?: string;
      globalAssetId?: string;
      specificAssetIds?: components["schemas"]["SpecificAssetId"][];
      defaultThumbnail?: components["schemas"]["Resource"];
    };
    DataSpecificationContent: Record<string, never>;
    EmbeddedDataSpecification: {
      dataSpecificationContent?: components["schemas"]["DataSpecificationContent"];
      dataSpecification?: components["schemas"]["Reference"];
    };
    Extension: {
      name?: string;
      value?: string;
      /** @enum {string} */
      valueType?: "xs:anyURI" | "xs:base64Binary" | "xs:boolean" | "xs:byte" | "xs:date" | "xs:dateTime" | "xs:decimal" | "xs:double" | "xs:duration" | "xs:float" | "xs:gDay" | "xs:gMonth" | "xs:gMonthDay" | "xs:gYear" | "xs:gYearMonth" | "xs:hexBinary" | "xs:int" | "xs:integer" | "xs:long" | "xs:negativeInteger" | "xs:nonNegativeInteger" | "xs:nonPositiveInteger" | "xs:positiveInteger" | "xs:short" | "xs:string" | "xs:time" | "xs:unsignedByte" | "xs:unsignedInt" | "xs:unsignedLong" | "xs:unsignedShort";
      refersTo?: components["schemas"]["Reference"][];
      supplementalSemanticIds?: components["schemas"]["Reference"][];
      semanticId?: components["schemas"]["Reference"];
    };
    Key: {
      /** @enum {string} */
      type?: "AnnotatedRelationshipElement" | "AssetAdministrationShell" | "BasicEventElement" | "Blob" | "Capability" | "ConceptDescription" | "DataElement" | "Entity" | "EventElement" | "File" | "FragmentReference" | "GlobalReference" | "Identifiable" | "MultiLanguageProperty" | "Operation" | "Property" | "Range" | "Referable" | "ReferenceElement" | "RelationshipElement" | "Submodel" | "SubmodelElement" | "SubmodelElementCollection" | "SubmodelElementList";
      value?: string;
    };
    LangStringNameType: {
      language?: string;
      text?: string;
    };
    LangStringTextType: {
      language?: string;
      text?: string;
    };
    Reference: {
      /** @enum {string} */
      type?: "ExternalReference" | "ModelReference";
      keys?: components["schemas"]["Key"][];
      referredSemanticId?: components["schemas"]["Reference"];
    };
    Resource: {
      contentType?: string;
      path?: string;
    };
    SpecificAssetId: {
      name?: string;
      value?: string;
      externalSubjectId?: components["schemas"]["Reference"];
      supplementalSemanticIds?: components["schemas"]["Reference"][];
      semanticId?: components["schemas"]["Reference"];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** @description Returns a all Asset Administration Shells contained in an environment from a url */
  getExternalShell: {
    parameters: {
      path: {
        /** @description url where the shell can be downloaded (UTF8-BASE64-URL-encoded) */
        url: string;
      };
    };
    responses: {
      /** @description Success: AssetAdministrationShells */
      200: {
        content: {
          "*/*": components["schemas"]["AssetAdministrationShell"][];
        };
      };
      /** @description File was not found or empty */
      404: {
        content: {
          "*/*": components["schemas"]["ApiError"];
        };
      };
      /** @description File is cannot be parsed (is most likely invalid or no AAS(X)/JSON) */
      422: {
        content: {
          "*/*": components["schemas"]["ApiError"];
        };
      };
    };
  };
}
