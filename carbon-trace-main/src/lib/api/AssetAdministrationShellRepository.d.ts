/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/shells": {
    /** Returns all Asset Administration Shells */
    get: operations["GetAllAssetAdministrationShells"];
    /** Creates a new Asset Administration Shell */
    post: operations["PostAssetAdministrationShell"];
  };
  "/shells/$reference": {
    /** Returns References to all Asset Administration Shells */
    get: operations["GetAllAssetAdministrationShells-Reference"];
  };
  "/shells/{aasIdentifier}": {
    /** Returns a specific Asset Administration Shell */
    get: operations["GetAssetAdministrationShellById"];
    /** Updates an existing Asset Administration Shell */
    put: operations["PutAssetAdministrationShellById"];
    /** Deletes an Asset Administration Shell */
    delete: operations["DeleteAssetAdministrationShellById"];
  };
  "/shells/{aasIdentifier}/$reference": {
    /** Returns a specific Asset Administration Shell as a Reference */
    get: operations["GetAssetAdministrationShellById-Reference_AasRepository"];
  };
  "/shells/{aasIdentifier}/asset-information": {
    /** Returns the Asset Information */
    get: operations["GetAssetInformation_AasRepository"];
    /** Updates the Asset Information */
    put: operations["PutAssetInformation_AasRepository"];
  };
  "/shells/{aasIdentifier}/asset-information/thumbnail": {
    get: operations["GetThumbnail_AasRepository"];
    put: operations["PutThumbnail_AasRepository"];
    delete: operations["DeleteThumbnail_AasRepository"];
  };
  "/shells/{aasIdentifier}/submodel-refs": {
    /** Returns all submodel references */
    get: operations["GetAllSubmodelReferences_AasRepository"];
    /** Creates a submodel reference at the Asset Administration Shell */
    post: operations["PostSubmodelReference_AasRepository"];
  };
  "/shells/{aasIdentifier}/submodel-refs/{submodelIdentifier}": {
    /** Deletes the submodel reference from the Asset Administration Shell. Does not delete the submodel itself! */
    delete: operations["DeleteSubmodelReferenceById_AasRepository"];
  };
  "/shells/{aasIdentifier}/submodels/{submodelIdentifier}": {
    /** Returns the Submodel */
    get: operations["GetSubmodelById_AasRepository"];
    /** Updates the Submodel */
    put: operations["PutSubmodelById_AasRepository"];
    /** Updates the Submodel */
    patch: operations["PatchSubmodel_AasRepository"];
  };
  "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$metadata": {
    /** Returns the Submodel's metadata elements */
    get: operations["GetSubmodelById-Metadata_AasRepository"];
    /** Deletes the submodel from the Asset Administration Shell and the Repository. */
    delete: operations["DeleteSubmodelById_AasRepository"];
    /** Updates the metadata attributes of the Submodel */
    patch: operations["PatchSubmodelById-Metadata_AasRepository"];
  };
  "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$value": {
    /** Returns the Submodel's ValueOnly representation */
    get: operations["GetSubmodelById-ValueOnly_AasRepository"];
    /** Updates teh values of the Submodel */
    patch: operations["PatchSubmodelById-ValueOnly_AasRepository"];
  };
  "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$reference": {
    /** Returns the Submodel as a Reference */
    get: operations["GetSubmodelById-Reference_AasRepository"];
  };
  "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$path": {
    /** Returns the Submodel's metadata elements */
    get: operations["GetSubmodelById-Path_AasRepository"];
  };
  "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements": {
    /** Returns all submodel elements including their hierarchy */
    get: operations["GetAllSubmodelElements_AasRepository"];
    /** Creates a new submodel element */
    post: operations["PostSubmodelElement_AasRepository"];
  };
  "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/$metadata": {
    /** Returns all submodel elements including their hierarchy */
    get: operations["GetAllSubmodelElements-Metadata_AasRepository"];
  };
  "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/$value": {
    /** Returns all submodel elements including their hierarchy in the ValueOnly representation */
    get: operations["GetAllSubmodelElements-ValueOnly_AasRepository"];
  };
  "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/$reference": {
    /** Returns all submodel elements as a list of References */
    get: operations["GetAllSubmodelElements-Reference_AasRepository"];
  };
  "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/$path": {
    /** Returns all submodel elements including their hierarchy */
    get: operations["GetAllSubmodelElements-Path_AasRepository"];
  };
  "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}": {
    /** Returns a specific submodel element from the Submodel at a specified path */
    get: operations["GetSubmodelElementByPath_AasRepository"];
    /** Updates an existing submodel element at a specified path within submodel elements hierarchy */
    put: operations["PutSubmodelElementByPath_AasRepository"];
    /** Creates a new submodel element at a specified path within submodel elements hierarchy */
    post: operations["PostSubmodelElementByPath_AasRepository"];
    /** Deletes a submodel element at a specified path within the submodel elements hierarchy */
    delete: operations["DeleteSubmodelElementByPath_AasRepository"];
    /** Updates an existing submodel element value at a specified path within submodel elements hierarchy */
    patch: operations["PatchSubmodelElementValueByPath_AasRepository"];
  };
  "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$metadata": {
    /** Returns the metadata attributes if a specific submodel element from the Submodel at a specified path */
    get: operations["GetSubmodelElementByPath-Metadata_AasRepository"];
    /** Updates the metadata attributes of an existing submodel element value at a specified path within submodel elements hierarchy */
    patch: operations["PatchSubmodelElementValueByPath-Metadata"];
  };
  "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$value": {
    /** Returns a specific submodel element from the Submodel at a specified path in the ValueOnly representation */
    get: operations["GetSubmodelElementByPath-ValueOnly_AasRepository"];
    /** Updates the value of an existing submodel element value at a specified path within submodel elements hierarchy */
    patch: operations["PatchSubmodelElementValueByPath-ValueOnly"];
  };
  "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$reference": {
    /** Returns the Reference of a specific submodel element from the Submodel at a specified path */
    get: operations["GetSubmodelElementByPath-Reference_AasRepository"];
  };
  "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$path": {
    /** Returns a specific submodel element from the Submodel at a specified path in the Path notation */
    get: operations["GetSubmodelElementByPath-Path_AasRepository"];
  };
  "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment": {
    /** Downloads file content from a specific submodel element from the Submodel at a specified path */
    get: operations["GetFileByPath_AasRepository"];
    /** Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy */
    put: operations["PutFileByPath_AasRepository"];
    /** Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy */
    delete: operations["DeleteFileByPath_AasRepository"];
  };
  "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke": {
    /** Synchronously invokes an Operation at a specified path */
    post: operations["InvokeOperation_AasRepository"];
  };
  "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke/$value": {
    /** Synchronously invokes an Operation at a specified path */
    post: operations["InvokeOperation-ValueOnly_AasRepository"];
  };
  "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-async": {
    /** Asynchronously invokes an Operation at a specified path */
    post: operations["InvokeOperationAsync_AasRepository"];
  };
  "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-async/$value": {
    /** Asynchronously invokes an Operation at a specified path */
    post: operations["InvokeOperationAsync-ValueOnly_AasRepository"];
  };
  "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-status/{handleId}": {
    /** Returns the Operation status of an asynchronous invoked Operation */
    get: operations["GetOperationAsyncStatus_AasRepository"];
  };
  "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}": {
    /** Returns the Operation result of an asynchronous invoked Operation */
    get: operations["GetOperationAsyncResult_AasRepository"];
  };
  "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}/$value": {
    /** Returns the ValueOnly notation of the Operation result of an asynchronous invoked Operation */
    get: operations["GetOperationAsyncResult-ValueOnly_AasRepository"];
  };
  "/serialization": {
    /** Returns an appropriate serialization based on the specified format (see SerializationFormat) */
    get: operations["GenerateSerializationByIds"];
  };
  "/description": {
    /** Returns the self-describing information of a network resource (ServiceDescription) */
    get: operations["GetDescription"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    SpecificAssetId: components["schemas"]["HasSemantics"] & {
      name: string;
      value: string;
      externalSubjectId?: components["schemas"]["Reference"];
    };
    HasSemantics: {
      semanticId?: components["schemas"]["Reference"];
      supplementalSemanticIds?: components["schemas"]["Reference"][];
    };
    Reference: components["schemas"]["ReferenceParent"] & {
      referredSemanticId?: components["schemas"]["ReferenceParent"];
    };
    ReferenceParent: {
      type: components["schemas"]["ReferenceTypes"];
      keys: components["schemas"]["Key"][];
    };
    /** @enum {string} */
    ReferenceTypes: "ExternalReference" | "ModelReference";
    Key: {
      type: components["schemas"]["KeyTypes"];
      value: string;
    };
    /** @enum {string} */
    KeyTypes: "AnnotatedRelationshipElement" | "AssetAdministrationShell" | "BasicEventElement" | "Blob" | "Capability" | "ConceptDescription" | "DataElement" | "Entity" | "EventElement" | "File" | "FragmentReference" | "GlobalReference" | "Identifiable" | "MultiLanguageProperty" | "Operation" | "Property" | "Range" | "Referable" | "ReferenceElement" | "RelationshipElement" | "Submodel" | "SubmodelElement" | "SubmodelElementCollection" | "SubmodelElementList";
    GetAssetAdministrationShellsResult: components["schemas"]["PagedResult"] & {
      result?: components["schemas"]["AssetAdministrationShell"][];
    };
    PagedResult: {
      paging_metadata?: components["schemas"]["PagedResult_paging_metadata"];
    };
    AssetAdministrationShell: components["schemas"]["Identifiable"] & components["schemas"]["HasDataSpecification"] & {
      derivedFrom?: components["schemas"]["Reference"];
      assetInformation: components["schemas"]["AssetInformation"];
      submodels?: components["schemas"]["Reference"][];
      modelType?: string;
    };
    Identifiable: components["schemas"]["Referable"] & {
      administration?: components["schemas"]["AdministrativeInformation"];
      id: string;
    };
    Referable: components["schemas"]["HasExtensions"] & {
      category?: string;
      idShort?: string;
      displayName?: components["schemas"]["LangStringNameType"][];
      description?: components["schemas"]["LangStringTextType"][];
      modelType: components["schemas"]["ModelType"];
    };
    HasExtensions: {
      extensions?: components["schemas"]["Extension"][];
    };
    Extension: components["schemas"]["HasSemantics"] & {
      name: string;
      valueType?: components["schemas"]["DataTypeDefXsd"];
      value?: string;
      refersTo?: components["schemas"]["Reference"][];
    };
    /** @enum {string} */
    DataTypeDefXsd: "xs:anyURI" | "xs:base64Binary" | "xs:boolean" | "xs:byte" | "xs:date" | "xs:dateTime" | "xs:decimal" | "xs:double" | "xs:duration" | "xs:float" | "xs:gDay" | "xs:gMonth" | "xs:gMonthDay" | "xs:gYear" | "xs:gYearMonth" | "xs:hexBinary" | "xs:int" | "xs:integer" | "xs:long" | "xs:negativeInteger" | "xs:nonNegativeInteger" | "xs:nonPositiveInteger" | "xs:positiveInteger" | "xs:short" | "xs:string" | "xs:time" | "xs:unsignedByte" | "xs:unsignedInt" | "xs:unsignedLong" | "xs:unsignedShort";
    LangStringNameType: components["schemas"]["AbstractLangString"] & {
      text?: unknown;
    };
    AbstractLangString: {
      language: string;
      text: string;
    };
    LangStringTextType: components["schemas"]["AbstractLangString"] & {
      text?: unknown;
    };
    /** @enum {string} */
    ModelType: "AnnotatedRelationshipElement" | "AssetAdministrationShell" | "BasicEventElement" | "Blob" | "Capability" | "ConceptDescription" | "DataSpecificationIec61360" | "Entity" | "File" | "MultiLanguageProperty" | "Operation" | "Property" | "Range" | "ReferenceElement" | "RelationshipElement" | "Submodel" | "SubmodelElementCollection" | "SubmodelElementList";
    AdministrativeInformation: components["schemas"]["HasDataSpecification"] & {
      version?: string;
      revision?: string;
      creator?: components["schemas"]["Reference"];
      templateId?: string;
    };
    HasDataSpecification: {
      embeddedDataSpecifications?: components["schemas"]["EmbeddedDataSpecification"][];
    };
    EmbeddedDataSpecification: {
      dataSpecification: components["schemas"]["Reference"];
      dataSpecificationContent: components["schemas"]["DataSpecificationContent_choice"];
    };
    DataSpecificationContent_choice: components["schemas"]["DataSpecificationIec61360"];
    DataSpecificationIec61360: components["schemas"]["DataSpecificationContent"] & {
      preferredName: components["schemas"]["LangStringPreferredNameTypeIec61360"][];
      shortName?: components["schemas"]["LangStringShortNameTypeIec61360"][];
      unit?: string;
      unitId?: components["schemas"]["Reference"];
      sourceOfDefinition?: string;
      symbol?: string;
      dataType?: components["schemas"]["DataTypeIec61360"];
      definition?: components["schemas"]["LangStringDefinitionTypeIec61360"][];
      valueFormat?: string;
      valueList?: components["schemas"]["ValueList"];
      value?: string;
      levelType?: components["schemas"]["LevelType"];
      modelType?: string;
    };
    DataSpecificationContent: {
      modelType: components["schemas"]["ModelType"];
    };
    LangStringPreferredNameTypeIec61360: components["schemas"]["AbstractLangString"] & {
      text?: unknown;
    };
    LangStringShortNameTypeIec61360: components["schemas"]["AbstractLangString"] & {
      text?: unknown;
    };
    /** @enum {string} */
    DataTypeIec61360: "BLOB" | "BOOLEAN" | "DATE" | "FILE" | "HTML" | "INTEGER_COUNT" | "INTEGER_CURRENCY" | "INTEGER_MEASURE" | "IRDI" | "IRI" | "RATIONAL" | "RATIONAL_MEASURE" | "REAL_COUNT" | "REAL_CURRENCY" | "REAL_MEASURE" | "STRING" | "STRING_TRANSLATABLE" | "TIME" | "TIMESTAMP";
    LangStringDefinitionTypeIec61360: components["schemas"]["AbstractLangString"] & {
      text?: unknown;
    };
    ValueList: {
      valueReferencePairs: components["schemas"]["ValueReferencePair"][];
    };
    ValueReferencePair: {
      value: string;
      valueId: components["schemas"]["Reference"];
    };
    LevelType: {
      min: boolean;
      nom: boolean;
      typ: boolean;
      max: boolean;
    };
    AssetInformation: {
      assetKind: components["schemas"]["AssetKind"];
      globalAssetId?: string;
      specificAssetIds?: components["schemas"]["SpecificAssetId"][];
      assetType?: string;
      defaultThumbnail?: components["schemas"]["Resource"];
    };
    /** @enum {string} */
    AssetKind: "Instance" | "NotApplicable" | "Type";
    Resource: {
      path: string;
      contentType?: string;
    };
    Result: {
      messages?: components["schemas"]["Message"][];
    };
    Message: {
      code?: string;
      correlationId?: string;
      /** @enum {string} */
      messageType?: "Undefined" | "Info" | "Warning" | "Error" | "Exception";
      text?: string;
      timestamp?: string;
    };
    GetReferencesResult: components["schemas"]["PagedResult"] & {
      result?: components["schemas"]["Reference"][];
    };
    Submodel: components["schemas"]["Identifiable"] & components["schemas"]["HasKind"] & components["schemas"]["HasSemantics"] & components["schemas"]["Qualifiable"] & components["schemas"]["HasDataSpecification"] & {
      submodelElements?: components["schemas"]["SubmodelElement_choice"][];
      modelType?: string;
    };
    HasKind: {
      kind?: components["schemas"]["ModellingKind"];
    };
    /** @enum {string} */
    ModellingKind: "Instance" | "Template";
    Qualifiable: {
      qualifiers?: components["schemas"]["Qualifier"][];
      modelType: components["schemas"]["ModelType"];
    };
    Qualifier: components["schemas"]["HasSemantics"] & {
      kind?: components["schemas"]["QualifierKind"];
      type: string;
      valueType: components["schemas"]["DataTypeDefXsd"];
      value?: string;
      valueId?: components["schemas"]["Reference"];
    };
    /** @enum {string} */
    QualifierKind: "ConceptQualifier" | "TemplateQualifier" | "ValueQualifier";
    SubmodelElement_choice: components["schemas"]["RelationshipElement"] | components["schemas"]["AnnotatedRelationshipElement"] | components["schemas"]["BasicEventElement"] | components["schemas"]["Blob"] | components["schemas"]["Capability"] | components["schemas"]["Entity"] | components["schemas"]["File"] | components["schemas"]["MultiLanguageProperty"] | components["schemas"]["Operation"] | components["schemas"]["Property"] | components["schemas"]["Range"] | components["schemas"]["ReferenceElement"] | components["schemas"]["SubmodelElementCollection"] | components["schemas"]["SubmodelElementList"];
    RelationshipElement: components["schemas"]["RelationshipElement_abstract"] & {
      modelType?: string;
    };
    RelationshipElement_abstract: components["schemas"]["SubmodelElement"] & {
      first: components["schemas"]["Reference"];
      second: components["schemas"]["Reference"];
    };
    SubmodelElement: components["schemas"]["Referable"] & components["schemas"]["HasSemantics"] & components["schemas"]["Qualifiable"] & components["schemas"]["HasDataSpecification"];
    AnnotatedRelationshipElement: components["schemas"]["RelationshipElement_abstract"] & {
      annotations?: components["schemas"]["DataElement_choice"][];
      modelType?: string;
    };
    DataElement_choice: components["schemas"]["Blob"] | components["schemas"]["File"] | components["schemas"]["MultiLanguageProperty"] | components["schemas"]["Property"] | components["schemas"]["Range"] | components["schemas"]["ReferenceElement"];
    Blob: components["schemas"]["DataElement"] & {
      /** Format: byte */
      value?: string;
      contentType: string;
      modelType?: string;
    };
    DataElement: components["schemas"]["SubmodelElement"];
    File: components["schemas"]["DataElement"] & {
      value?: string;
      contentType: string;
      modelType?: string;
    };
    MultiLanguageProperty: components["schemas"]["DataElement"] & {
      value?: components["schemas"]["LangStringTextType"][];
      valueId?: components["schemas"]["Reference"];
      modelType?: string;
    };
    Property: components["schemas"]["DataElement"] & {
      valueType: components["schemas"]["DataTypeDefXsd"];
      value?: string;
      valueId?: components["schemas"]["Reference"];
      modelType?: string;
    };
    Range: components["schemas"]["DataElement"] & {
      valueType: components["schemas"]["DataTypeDefXsd"];
      min?: string;
      max?: string;
      modelType?: string;
    };
    ReferenceElement: components["schemas"]["DataElement"] & {
      value?: components["schemas"]["Reference"];
      modelType?: string;
    };
    BasicEventElement: components["schemas"]["EventElement"] & {
      observed: components["schemas"]["Reference"];
      direction: components["schemas"]["Direction"];
      state: components["schemas"]["StateOfEvent"];
      messageTopic?: string;
      messageBroker?: components["schemas"]["Reference"];
      lastUpdate?: string;
      minInterval?: string;
      maxInterval?: string;
      modelType?: string;
    };
    EventElement: components["schemas"]["SubmodelElement"];
    /** @enum {string} */
    Direction: "input" | "output";
    /** @enum {string} */
    StateOfEvent: "off" | "on";
    Capability: components["schemas"]["SubmodelElement"] & {
      modelType?: string;
    };
    Entity: components["schemas"]["SubmodelElement"] & {
      statements?: components["schemas"]["SubmodelElement_choice"][];
      entityType: components["schemas"]["EntityType"];
      globalAssetId?: string;
      specificAssetIds?: components["schemas"]["SpecificAssetId"][];
      modelType?: string;
    };
    /** @enum {string} */
    EntityType: "CoManagedEntity" | "SelfManagedEntity";
    Operation: components["schemas"]["SubmodelElement"] & {
      inputVariables?: components["schemas"]["OperationVariable"][];
      outputVariables?: components["schemas"]["OperationVariable"][];
      inoutputVariables?: components["schemas"]["OperationVariable"][];
      modelType?: string;
    };
    OperationVariable: {
      value: components["schemas"]["SubmodelElement_choice"];
    };
    SubmodelElementCollection: components["schemas"]["SubmodelElement"] & {
      value?: components["schemas"]["SubmodelElement_choice"][];
      modelType?: string;
    };
    SubmodelElementList: components["schemas"]["SubmodelElement"] & {
      orderRelevant?: boolean;
      semanticIdListElement?: components["schemas"]["Reference"];
      typeValueListElement: components["schemas"]["AasSubmodelElements"];
      valueTypeListElement?: components["schemas"]["DataTypeDefXsd"];
      value?: components["schemas"]["SubmodelElement_choice"][];
      modelType?: string;
    };
    /** @enum {string} */
    AasSubmodelElements: "AnnotatedRelationshipElement" | "BasicEventElement" | "Blob" | "Capability" | "DataElement" | "Entity" | "EventElement" | "File" | "MultiLanguageProperty" | "Operation" | "Property" | "Range" | "ReferenceElement" | "RelationshipElement" | "SubmodelElement" | "SubmodelElementCollection" | "SubmodelElementList";
    SubmodelMetadata: components["schemas"]["Identifiable"] & components["schemas"]["HasDataSpecification"] & components["schemas"]["Qualifiable"] & components["schemas"]["HasSemantics"] & components["schemas"]["HasKind"];
    SubmodelValue: {
      submodelElements?: components["schemas"]["SubmodelElement"][];
    };
    PathItem: string;
    GetSubmodelElementsResult: components["schemas"]["PagedResult"] & {
      result?: components["schemas"]["SubmodelElement"][];
    };
    GetSubmodelElementsMetadataResult: components["schemas"]["PagedResult"] & {
      result?: components["schemas"]["SubmodelElementMetadata"][];
    };
    SubmodelElementMetadata: components["schemas"]["BlobMetadata"] | components["schemas"]["FileMetadata"] | components["schemas"]["CapabilityMetadata"] | components["schemas"]["EntityMetadata"] | components["schemas"]["BasicEventElementMetadata"] | components["schemas"]["MultiLanguagePropertyMetadata"] | components["schemas"]["OperationMetadata"] | components["schemas"]["PropertyMetadata"] | components["schemas"]["RangeMetadata"] | components["schemas"]["ReferenceElementMetadata"] | components["schemas"]["AnnotatedRelationshipElementMetadata"] | components["schemas"]["RelationshipElementMetadata"] | components["schemas"]["SubmodelElementListMetadata"] | components["schemas"]["SubmodelElementCollectionMetadata"];
    SubmodelElementAttributes: components["schemas"]["Referable"] & components["schemas"]["HasDataSpecification"] & components["schemas"]["HasSemantics"] & components["schemas"]["Qualifiable"] & components["schemas"]["HasKind"];
    BlobMetadata: components["schemas"]["Referable"] & components["schemas"]["HasDataSpecification"] & components["schemas"]["HasSemantics"] & components["schemas"]["Qualifiable"] & components["schemas"]["HasKind"];
    FileMetadata: components["schemas"]["SubmodelElementAttributes"];
    CapabilityMetadata: components["schemas"]["SubmodelElementAttributes"];
    EntityMetadata: components["schemas"]["SubmodelElementAttributes"];
    BasicEventElementMetadata: components["schemas"]["SubmodelElementAttributes"] & {
      direction?: components["schemas"]["Direction"];
      state?: components["schemas"]["StateOfEvent"];
      messageTopic?: string;
      messageBroker?: components["schemas"]["Reference"];
      lastUpdate?: string;
      minInterval?: string;
      maxInterval?: string;
    };
    MultiLanguagePropertyMetadata: components["schemas"]["SubmodelElementAttributes"];
    OperationMetadata: components["schemas"]["SubmodelElementAttributes"];
    PropertyMetadata: {
      valueType?: components["schemas"]["DataTypeDefXsd"];
    } & components["schemas"]["SubmodelElementAttributes"];
    RangeMetadata: {
      valueType?: components["schemas"]["DataTypeDefXsd"];
    } & components["schemas"]["SubmodelElementAttributes"];
    ReferenceElementMetadata: components["schemas"]["SubmodelElementAttributes"];
    AnnotatedRelationshipElementMetadata: components["schemas"]["Referable"] & components["schemas"]["HasDataSpecification"] & components["schemas"]["HasSemantics"] & components["schemas"]["Qualifiable"] & components["schemas"]["HasKind"];
    RelationshipElementMetadata: components["schemas"]["SubmodelElementAttributes"];
    SubmodelElementListMetadata: {
      orderRelevant?: boolean;
      semanticIdListElement?: components["schemas"]["Reference"];
      typeValueListElement?: components["schemas"]["ModelType"];
      valueTypeListElement?: components["schemas"]["DataTypeDefXsd"];
    } & components["schemas"]["SubmodelElementAttributes"];
    SubmodelElementCollectionMetadata: components["schemas"]["SubmodelElementAttributes"];
    GetSubmodelElementsValueResult: components["schemas"]["PagedResult"] & {
      result?: components["schemas"]["SubmodelElementValue"][];
    };
    SubmodelElementValue: components["schemas"]["BasicEventElementValue"] | components["schemas"]["PropertyValue"] | components["schemas"]["MultiLanguagePropertyValue"] | components["schemas"]["BlobValue"] | components["schemas"]["FileValue"] | components["schemas"]["RangeValue"] | components["schemas"]["ReferenceElementValue"] | components["schemas"]["RelationshipElementValue"] | components["schemas"]["AnnotatedRelationshipElementValue"] | components["schemas"]["EntityValue"] | components["schemas"]["SubmodelElementCollectionValue"] | components["schemas"]["SubmodelElementListValue"];
    BasicEventElementValue: {
      observed: components["schemas"]["ReferenceValue"];
    };
    ReferenceValue: {
      type?: components["schemas"]["ReferenceTypes"];
      keys?: components["schemas"]["Key"][];
    };
    PropertyValue: components["schemas"]["StringValue"] | components["schemas"]["NumberValue"] | components["schemas"]["BooleanValue"];
    StringValue: string;
    NumberValue: number;
    BooleanValue: boolean;
    /** @description Since patternProperties and propertyNames are not supported by OpenApi yet, the ValueOnly serialization for this elements works with the key-attribute as the JSON-property name and the value-attribute as the corresponding value. */
    MultiLanguagePropertyValue: Record<string, never>;
    BlobValue: {
      contentType: string;
      value: string;
    };
    FileValue: {
      contentType: string;
      value: string;
    };
    RangeValue: {
      max: number;
      min: number;
    };
    ReferenceElementValue: {
      type?: components["schemas"]["ReferenceTypes"];
      keys?: components["schemas"]["Key"][];
    };
    RelationshipElementValue: {
      first: components["schemas"]["ReferenceValue"];
      second: components["schemas"]["ReferenceValue"];
    };
    AnnotatedRelationshipElementValue: {
      first: components["schemas"]["ReferenceValue"];
      second: components["schemas"]["ReferenceValue"];
      annotations?: components["schemas"]["ValueOnly"][];
    };
    /** @description The ValueOnly serialization of submodel elements (patternProperties and propertyNames will be supported propably with OpenApi 3.1). The full description of the generic JSON validation schema for the ValueOnly-serialization can be found in chapter 11.4.3 in Details of the Asset Administration Shell Part 2. */
    ValueOnly: Record<string, never>;
    EntityValue: {
      entityType: components["schemas"]["EntityType"];
      globalAssetId?: string;
      specificAssetIds?: components["schemas"]["SpecificAssetIdValue"][];
      statements: components["schemas"]["ValueOnly"][];
    };
    /** @description Since patternProperties and propertyNames are not supported by OpenApi yet, the ValueOnly serialization for this elements works with the key-attribute as the JSON-property name and the value-attribute as the corresponding value. */
    SpecificAssetIdValue: Record<string, never>;
    /** @description Since patternProperties and propertyNames are not supported by OpenApi yet, the ValueOnly serialization for this elements works with the key-attribute as the JSON-property name and the value-attribute as the corresponding value. */
    SubmodelElementCollectionValue: Record<string, never>;
    SubmodelElementListValue: components["schemas"]["SubmodelElementValue"][];
    GetPathItemsResult: components["schemas"]["PagedResult"] & {
      result?: components["schemas"]["PathItem"][];
    };
    OperationRequest: {
      inoutputArguments?: components["schemas"]["OperationVariable"][];
      inputArguments?: components["schemas"]["OperationVariable"][];
      clientTimeoutDuration?: string;
    };
    OperationResult: components["schemas"]["BaseOperationResult"] & {
      inoutputArguments?: components["schemas"]["OperationVariable"][];
      outputArguments?: components["schemas"]["OperationVariable"][];
    };
    BaseOperationResult: components["schemas"]["Result"] & {
      executionState?: components["schemas"]["ExecutionState"];
      success?: boolean;
    };
    /** @enum {string} */
    ExecutionState: "Initiated" | "Running" | "Completed" | "Canceled" | "Failed" | "Timeout";
    OperationRequestValueOnly: {
      inoutputArguments?: components["schemas"]["ValueOnly"];
      inputArguments?: components["schemas"]["ValueOnly"];
      clientTimeoutDuration: string;
    };
    OperationResultValueOnly: components["schemas"]["BaseOperationResult"] & {
      inoutputArguments?: components["schemas"]["ValueOnly"];
      outputArguments?: components["schemas"]["ValueOnly"];
    };
    Environment: {
      assetAdministrationShells?: components["schemas"]["AssetAdministrationShell"][];
      submodels?: components["schemas"]["Submodel"][];
      conceptDescriptions?: components["schemas"]["ConceptDescription"][];
    };
    ConceptDescription: components["schemas"]["Identifiable"] & components["schemas"]["HasDataSpecification"] & {
      isCaseOf?: components["schemas"]["Reference"][];
      modelType?: string;
    };
    /**
     * @description The Description object enables servers to present their capabilities to the clients, in particular which profiles they implement. At least one defined profile is required. Additional, proprietary attributes might be included. Nevertheless, the server must not expect that a regular client understands them.
     * @example {
     *   "profiles": [
     *     "RepositoryServiceSpecification/V3.0-MinimalProfile",
     *     "RegistryServiceSpecification/V3.0"
     *   ]
     * }
     */
    ServiceDescription: {
      profiles?: ("AssetAdministrationShellServiceSpecification/V3.0" | "AssetAdministrationShellServiceSpecification/V3.0-MinimalProfile" | "SubmodelServiceSpecification/V3.0" | "SubmodelServiceSpecification/V3.0-ValueProfile" | "SubmodelServiceSpecification/V3.0-MinimalProfile" | "AasxFileServerServiceSpecification/V3.0" | "RegistryServiceSpecification/V3.0" | "RegistryServiceSpecification/V3.0- AssetAdministrationShellRegistry" | "RegistryServiceSpecification/V3.0-SubmodelRegistry" | "RepositoryServiceSpecification/V3.0" | "RepositoryServiceSpecification/V3.0-MinimalProfile" | "AssetAdministrationShellRepositoryServiceSpecification/V3.0" | "AssetAdministrationShellRepositoryServiceSpecification/V3.0-MinimalProfile" | "SubmodelRepositoryServiceSpecification/V3.0" | "SubmodelRepositoryServiceSpecification/V3.0-MinimalProfile" | "RegistryAndDiscoveryServiceSpecification/V3.0")[];
    };
    assetinformation_thumbnail_body: {
      fileName?: string;
      /** Format: binary */
      file?: string;
    };
    idShortPath_attachment_body: {
      fileName?: string;
      /** Format: binary */
      file?: string;
    };
    PagedResult_paging_metadata: {
      /** @example wJlCDLIl6KTWypN7T6vc6nWEmEYe99Hjf1XY1xmqV-M=# */
      cursor?: string;
    };
  };
  responses: {
    /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
    "bad-request": {
      content: {
        "application/json": components["schemas"]["Result"];
      };
    };
    /** @description Unauthorized, e.g. the server refused the authorization attempt. */
    unauthorized: {
      content: {
        "application/json": components["schemas"]["Result"];
      };
    };
    /** @description Forbidden */
    forbidden: {
      content: {
        "application/json": components["schemas"]["Result"];
      };
    };
    /** @description Internal Server Error */
    "internal-server-error": {
      content: {
        "application/json": components["schemas"]["Result"];
      };
    };
    /** @description Default error handling for unmentioned status codes */
    default: {
      content: {
        "application/json": components["schemas"]["Result"];
      };
    };
    /** @description Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request. */
    conflict: {
      content: {
        "application/json": components["schemas"]["Result"];
      };
    };
    /** @description Not Found */
    "not-found": {
      content: {
        "application/json": components["schemas"]["Result"];
      };
    };
    /** @description The server has accepted the request. */
    accepted: {
      headers: {
        /** @description The URL where the client can find more information about the request. */
        Location?: string;
      };
      content: never;
    };
    /** @description The target resource is available but at a different location. */
    found: {
      headers: {
        /** @description The URL where the client can find the target resource. */
        Location?: string;
      };
      content: never;
    };
  };
  parameters: {
    /** @description A list of specific Asset identifiers */
    AssetIds?: components["schemas"]["SpecificAssetId"][];
    /** @description The Asset Administration Shell’s IdShort */
    IdShort?: string;
    /** @description The maximum number of elements in the response array */
    Limit?: number;
    /** @description A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue */
    Cursor?: string;
    /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
    AssetAdministrationShellIdentifier: string;
    /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
    SubmodelIdentifier: string;
    /** @description Determines the structural depth of the respective resource content */
    Level?: "deep" | "core";
    /** @description Determines to which extent the resource is being serialized */
    Extent?: "withBlobValue" | "withoutBlobValue";
    /** @description IdShort path to the submodel element (dot-separated) */
    IdShortPath: string;
    /** @description The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded) */
    HandleId: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Returns all Asset Administration Shells */
  GetAllAssetAdministrationShells: {
    parameters: {
      query?: {
        /** @description A list of specific Asset identifiers */
        assetIds?: components["schemas"]["SpecificAssetId"][];
        /** @description The Asset Administration Shell’s IdShort */
        idShort?: string;
        /** @description The maximum number of elements in the response array */
        limit?: number;
        /** @description A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue */
        cursor?: string;
      };
    };
    responses: {
      /** @description Requested Asset Administration Shells */
      200: {
        content: {
          "application/json": components["schemas"]["GetAssetAdministrationShellsResult"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Creates a new Asset Administration Shell */
  PostAssetAdministrationShell: {
    /** @description Asset Administration Shell object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetAdministrationShell"];
      };
    };
    responses: {
      /** @description Asset Administration Shell created successfully */
      201: {
        content: {
          "application/json": components["schemas"]["AssetAdministrationShell"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request. */
      409: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns References to all Asset Administration Shells */
  "GetAllAssetAdministrationShells-Reference": {
    parameters: {
      query?: {
        /** @description A list of specific Asset identifiers */
        assetIds?: components["schemas"]["SpecificAssetId"][];
        /** @description The Asset Administration Shell’s IdShort */
        idShort?: string;
        /** @description The maximum number of elements in the response array */
        limit?: number;
        /** @description A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue */
        cursor?: string;
      };
    };
    responses: {
      /** @description Requested Asset Administration Shells as a list of References */
      200: {
        content: {
          "application/json": components["schemas"]["GetReferencesResult"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns a specific Asset Administration Shell */
  GetAssetAdministrationShellById: {
    parameters: {
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
      };
    };
    responses: {
      /** @description Requested Asset Administration Shell */
      200: {
        content: {
          "application/json": components["schemas"]["AssetAdministrationShell"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Updates an existing Asset Administration Shell */
  PutAssetAdministrationShellById: {
    parameters: {
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
      };
    };
    /** @description Asset Administration Shell object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetAdministrationShell"];
      };
    };
    responses: {
      /** @description Asset Administration Shell updated successfully */
      204: {
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Deletes an Asset Administration Shell */
  DeleteAssetAdministrationShellById: {
    parameters: {
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
      };
    };
    responses: {
      /** @description Asset Administration Shell deleted successfully */
      204: {
        content: never;
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns a specific Asset Administration Shell as a Reference */
  "GetAssetAdministrationShellById-Reference_AasRepository": {
    parameters: {
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
      };
    };
    responses: {
      /** @description Requested Asset Administration Shell */
      200: {
        content: {
          "application/json": components["schemas"]["Reference"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns the Asset Information */
  GetAssetInformation_AasRepository: {
    parameters: {
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
      };
    };
    responses: {
      /** @description Requested Asset Information */
      200: {
        content: {
          "application/json": components["schemas"]["AssetInformation"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Updates the Asset Information */
  PutAssetInformation_AasRepository: {
    parameters: {
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
      };
    };
    /** @description Asset Information object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetInformation"];
      };
    };
    responses: {
      /** @description Asset Information updated successfully */
      204: {
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  GetThumbnail_AasRepository: {
    parameters: {
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
      };
    };
    responses: {
      /** @description The thumbnail of the Asset Information. */
      200: {
        content: {
          "application/octet-stream": string;
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  PutThumbnail_AasRepository: {
    parameters: {
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
      };
    };
    /** @description Thumbnail to upload */
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["assetinformation_thumbnail_body"];
      };
    };
    responses: {
      /** @description Thumbnail updated successfully */
      204: {
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  DeleteThumbnail_AasRepository: {
    parameters: {
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
      };
    };
    responses: {
      /** @description Thumbnail deletion successful */
      200: {
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns all submodel references */
  GetAllSubmodelReferences_AasRepository: {
    parameters: {
      query?: {
        /** @description The maximum number of elements in the response array */
        limit?: number;
        /** @description A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue */
        cursor?: string;
      };
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
      };
    };
    responses: {
      /** @description Requested submodel references */
      200: {
        content: {
          "application/json": components["schemas"]["GetReferencesResult"][];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Creates a submodel reference at the Asset Administration Shell */
  PostSubmodelReference_AasRepository: {
    parameters: {
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
      };
    };
    /** @description Reference to the Submodel */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Reference"];
      };
    };
    responses: {
      /** @description Submodel reference created successfully */
      201: {
        content: {
          "application/json": components["schemas"]["Reference"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request. */
      409: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Deletes the submodel reference from the Asset Administration Shell. Does not delete the submodel itself! */
  DeleteSubmodelReferenceById_AasRepository: {
    parameters: {
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    responses: {
      /** @description Submodel reference deleted successfully */
      204: {
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns the Submodel */
  GetSubmodelById_AasRepository: {
    parameters: {
      query?: {
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep" | "core";
        /** @description Determines to which extent the resource is being serialized */
        extent?: "withBlobValue" | "withoutBlobValue";
      };
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    responses: {
      /** @description Requested Submodel */
      200: {
        content: {
          "application/json": components["schemas"]["Submodel"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Updates the Submodel */
  PutSubmodelById_AasRepository: {
    parameters: {
      query?: {
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep";
      };
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    /** @description Submodel object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Submodel"];
      };
    };
    responses: {
      /** @description Submodel updated successfully */
      204: {
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Updates the Submodel */
  PatchSubmodel_AasRepository: {
    parameters: {
      query?: {
        /** @description Determines the structural depth of the respective resource content */
        level?: "core";
      };
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    /** @description Submodel object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Submodel"];
      };
    };
    responses: {
      /** @description Submodel updated successfully */
      204: {
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns the Submodel's metadata elements */
  "GetSubmodelById-Metadata_AasRepository": {
    parameters: {
      query?: {
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep" | "core";
      };
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    responses: {
      /** @description Requested Submodel */
      200: {
        content: {
          "application/json": components["schemas"]["SubmodelMetadata"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Deletes the submodel from the Asset Administration Shell and the Repository. */
  DeleteSubmodelById_AasRepository: {
    parameters: {
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    responses: {
      /** @description Submodel deleted successfully */
      204: {
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Updates the metadata attributes of the Submodel */
  "PatchSubmodelById-Metadata_AasRepository": {
    parameters: {
      query?: {
        /** @description Determines the structural depth of the respective resource content */
        level?: "core";
      };
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    /** @description Submodel object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubmodelMetadata"];
      };
    };
    responses: {
      /** @description Submodel updated successfully */
      204: {
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns the Submodel's ValueOnly representation */
  "GetSubmodelById-ValueOnly_AasRepository": {
    parameters: {
      query?: {
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep" | "core";
        /** @description Determines to which extent the resource is being serialized */
        extent?: "withBlobValue" | "withoutBlobValue";
      };
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    responses: {
      /** @description Requested Submodel */
      200: {
        content: {
          "application/json": components["schemas"]["SubmodelValue"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Updates teh values of the Submodel */
  "PatchSubmodelById-ValueOnly_AasRepository": {
    parameters: {
      query?: {
        /** @description Determines the structural depth of the respective resource content */
        level?: "core";
      };
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    /** @description Submodel object in the ValueOnly representation */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubmodelValue"];
      };
    };
    responses: {
      /** @description Submodel updated successfully */
      204: {
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns the Submodel as a Reference */
  "GetSubmodelById-Reference_AasRepository": {
    parameters: {
      query?: {
        /** @description Determines the structural depth of the respective resource content */
        level?: "core";
      };
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    responses: {
      /** @description Requested Submodel as a Reference */
      200: {
        content: {
          "application/json": components["schemas"]["Reference"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns the Submodel's metadata elements */
  "GetSubmodelById-Path_AasRepository": {
    parameters: {
      query?: {
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep" | "core";
      };
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    responses: {
      /** @description Requested Submodel in Path notation */
      200: {
        content: {
          "application/json": components["schemas"]["PathItem"][];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns all submodel elements including their hierarchy */
  GetAllSubmodelElements_AasRepository: {
    parameters: {
      query?: {
        /** @description The maximum number of elements in the response array */
        limit?: number;
        /** @description A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue */
        cursor?: string;
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep" | "core";
        /** @description Determines to which extent the resource is being serialized */
        extent?: "withBlobValue" | "withoutBlobValue";
      };
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    responses: {
      /** @description List of found submodel elements */
      200: {
        content: {
          "application/json": components["schemas"]["GetSubmodelElementsResult"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Creates a new submodel element */
  PostSubmodelElement_AasRepository: {
    parameters: {
      query?: {
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep" | "core";
        /** @description Determines to which extent the resource is being serialized */
        extent?: "withBlobValue" | "withoutBlobValue";
      };
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    /** @description Requested submodel element */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubmodelElement"];
      };
    };
    responses: {
      /** @description Submodel element created successfully */
      201: {
        content: {
          "application/json": components["schemas"]["SubmodelElement"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request. */
      409: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns all submodel elements including their hierarchy */
  "GetAllSubmodelElements-Metadata_AasRepository": {
    parameters: {
      query?: {
        /** @description The maximum number of elements in the response array */
        limit?: number;
        /** @description A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue */
        cursor?: string;
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep" | "core";
      };
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    responses: {
      /** @description List of found submodel elements */
      200: {
        content: {
          "application/json": components["schemas"]["GetSubmodelElementsMetadataResult"][];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns all submodel elements including their hierarchy in the ValueOnly representation */
  "GetAllSubmodelElements-ValueOnly_AasRepository": {
    parameters: {
      query?: {
        /** @description The maximum number of elements in the response array */
        limit?: number;
        /** @description A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue */
        cursor?: string;
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep" | "core";
      };
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    responses: {
      /** @description List of found submodel elements in their ValueOnly representation */
      200: {
        content: {
          "application/json": components["schemas"]["GetSubmodelElementsValueResult"][];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns all submodel elements as a list of References */
  "GetAllSubmodelElements-Reference_AasRepository": {
    parameters: {
      query?: {
        /** @description The maximum number of elements in the response array */
        limit?: number;
        /** @description A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue */
        cursor?: string;
        /** @description Determines the structural depth of the respective resource content */
        level?: "core";
      };
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    responses: {
      /** @description List of References of the found submodel elements */
      200: {
        content: {
          "application/json": components["schemas"]["GetReferencesResult"][];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns all submodel elements including their hierarchy */
  "GetAllSubmodelElements-Path_AasRepository": {
    parameters: {
      query?: {
        /** @description The maximum number of elements in the response array */
        limit?: number;
        /** @description A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue */
        cursor?: string;
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep" | "core";
        /** @description Determines to which extent the resource is being serialized */
        extent?: "withBlobValue" | "withoutBlobValue";
      };
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    responses: {
      /** @description List of found submodel elements in the Path notation */
      200: {
        content: {
          "application/json": components["schemas"]["GetPathItemsResult"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns a specific submodel element from the Submodel at a specified path */
  GetSubmodelElementByPath_AasRepository: {
    parameters: {
      query?: {
        /** @description The maximum number of elements in the response array */
        limit?: number;
        /** @description A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue */
        cursor?: string;
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep" | "core";
        /** @description Determines to which extent the resource is being serialized */
        extent?: "withBlobValue" | "withoutBlobValue";
      };
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    responses: {
      /** @description Requested submodel element */
      200: {
        content: {
          "application/json": components["schemas"]["GetSubmodelElementsResult"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Updates an existing submodel element at a specified path within submodel elements hierarchy */
  PutSubmodelElementByPath_AasRepository: {
    parameters: {
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    /** @description Requested submodel element */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubmodelElement"];
      };
    };
    responses: {
      /** @description Submodel element updated successfully */
      204: {
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Creates a new submodel element at a specified path within submodel elements hierarchy */
  PostSubmodelElementByPath_AasRepository: {
    parameters: {
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    /** @description Requested submodel element */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubmodelElement"];
      };
    };
    responses: {
      /** @description Submodel element created successfully */
      201: {
        content: {
          "application/json": components["schemas"]["SubmodelElement"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request. */
      409: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Deletes a submodel element at a specified path within the submodel elements hierarchy */
  DeleteSubmodelElementByPath_AasRepository: {
    parameters: {
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    responses: {
      /** @description Submodel element deleted successfully */
      204: {
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Updates an existing submodel element value at a specified path within submodel elements hierarchy */
  PatchSubmodelElementValueByPath_AasRepository: {
    parameters: {
      query?: {
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep" | "core";
      };
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    /** @description The updated value of the submodel element */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubmodelElement"];
      };
    };
    responses: {
      /** @description Submodel element updated successfully */
      204: {
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns the metadata attributes if a specific submodel element from the Submodel at a specified path */
  "GetSubmodelElementByPath-Metadata_AasRepository": {
    parameters: {
      query?: {
        /** @description The maximum number of elements in the response array */
        limit?: number;
        /** @description A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue */
        cursor?: string;
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep" | "core";
      };
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    responses: {
      /** @description Requested submodel element */
      200: {
        content: {
          "application/json": components["schemas"]["GetSubmodelElementsMetadataResult"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Updates the metadata attributes of an existing submodel element value at a specified path within submodel elements hierarchy */
  "PatchSubmodelElementValueByPath-Metadata": {
    parameters: {
      query?: {
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep" | "core";
      };
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    /** @description The updated metadata attributes of the submodel element */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubmodelElementMetadata"];
      };
    };
    responses: {
      /** @description Submodel element updated successfully */
      204: {
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns a specific submodel element from the Submodel at a specified path in the ValueOnly representation */
  "GetSubmodelElementByPath-ValueOnly_AasRepository": {
    parameters: {
      query?: {
        /** @description The maximum number of elements in the response array */
        limit?: number;
        /** @description A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue */
        cursor?: string;
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep" | "core";
        /** @description Determines to which extent the resource is being serialized */
        extent?: "withBlobValue" | "withoutBlobValue";
      };
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    responses: {
      /** @description Requested submodel element in its ValueOnly representation */
      200: {
        content: {
          "application/json": components["schemas"]["GetSubmodelElementsValueResult"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Updates the value of an existing submodel element value at a specified path within submodel elements hierarchy */
  "PatchSubmodelElementValueByPath-ValueOnly": {
    parameters: {
      query?: {
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep" | "core";
      };
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    /** @description The updated value of the submodel element */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubmodelElementValue"];
      };
    };
    responses: {
      /** @description Submodel element updated successfully */
      204: {
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns the Reference of a specific submodel element from the Submodel at a specified path */
  "GetSubmodelElementByPath-Reference_AasRepository": {
    parameters: {
      query?: {
        /** @description Determines the structural depth of the respective resource content */
        level?: "core";
      };
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    responses: {
      /** @description Requested submodel element in its ValueOnly representation */
      200: {
        content: {
          "application/json": components["schemas"]["Reference"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns a specific submodel element from the Submodel at a specified path in the Path notation */
  "GetSubmodelElementByPath-Path_AasRepository": {
    parameters: {
      query?: {
        /** @description Determines the structural depth of the respective resource content */
        level?: "deep" | "core";
      };
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    responses: {
      /** @description Requested submodel element in the Path notation */
      200: {
        content: {
          "application/json": components["schemas"]["PathItem"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Downloads file content from a specific submodel element from the Submodel at a specified path */
  GetFileByPath_AasRepository: {
    parameters: {
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    responses: {
      /** @description Requested file */
      200: {
        headers: {
          /**
           * @description In order to physically download the file usually set to attachment with a filename
           * @example attachment; filename="filename.jpg"
           */
          "Content-Disposition"?: string;
        };
        content: {
          "application/octet-stream": string;
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy */
  PutFileByPath_AasRepository: {
    parameters: {
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    /** @description File to upload */
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["idShortPath_attachment_body"];
      };
    };
    responses: {
      /** @description Submodel element updated successfully */
      204: {
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy */
  DeleteFileByPath_AasRepository: {
    parameters: {
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    responses: {
      /** @description Submodel element updated successfully */
      200: {
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Synchronously invokes an Operation at a specified path */
  InvokeOperation_AasRepository: {
    parameters: {
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    /** @description Operation request object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["OperationRequest"];
      };
    };
    responses: {
      /** @description Operation result object */
      200: {
        content: {
          "application/json": components["schemas"]["OperationResult"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Synchronously invokes an Operation at a specified path */
  "InvokeOperation-ValueOnly_AasRepository": {
    parameters: {
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    /** @description Operation request object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["OperationRequestValueOnly"];
      };
    };
    responses: {
      /** @description Operation result object */
      200: {
        content: {
          "application/json": components["schemas"]["OperationResultValueOnly"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Asynchronously invokes an Operation at a specified path */
  InvokeOperationAsync_AasRepository: {
    parameters: {
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    /** @description Operation request object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["OperationRequest"];
      };
    };
    responses: {
      /** @description The server has accepted the request. */
      202: {
        headers: {
          /** @description The URL where the client can find more information about the request. */
          Location?: string;
        };
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Asynchronously invokes an Operation at a specified path */
  "InvokeOperationAsync-ValueOnly_AasRepository": {
    parameters: {
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
      };
    };
    /** @description Operation request object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["OperationRequestValueOnly"];
      };
    };
    responses: {
      /** @description The server has accepted the request. */
      202: {
        headers: {
          /** @description The URL where the client can find more information about the request. */
          Location?: string;
        };
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns the Operation status of an asynchronous invoked Operation */
  GetOperationAsyncStatus_AasRepository: {
    parameters: {
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
        /** @description The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded) */
        handleId: string;
      };
    };
    responses: {
      /** @description Operation result object containing information that the 'executionState' is still 'Running' */
      200: {
        content: {
          "application/json": components["schemas"]["BaseOperationResult"];
        };
      };
      /** @description The target resource is available but at a different location. */
      302: {
        headers: {
          /** @description The URL where the client can find the target resource. */
          Location?: string;
        };
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns the Operation result of an asynchronous invoked Operation */
  GetOperationAsyncResult_AasRepository: {
    parameters: {
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
        /** @description The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded) */
        handleId: string;
      };
    };
    responses: {
      /** @description Operation result object */
      200: {
        content: {
          "application/json": components["schemas"]["OperationResult"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns the ValueOnly notation of the Operation result of an asynchronous invoked Operation */
  "GetOperationAsyncResult-ValueOnly_AasRepository": {
    parameters: {
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
        /** @description IdShort path to the submodel element (dot-separated) */
        idShortPath: string;
        /** @description The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded) */
        handleId: string;
      };
    };
    responses: {
      /** @description Operation result object */
      200: {
        content: {
          "application/json": components["schemas"]["OperationResultValueOnly"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns an appropriate serialization based on the specified format (see SerializationFormat) */
  GenerateSerializationByIds: {
    parameters: {
      query?: {
        /** @description The Asset Administration Shells' unique ids (UTF8-BASE64-URL-encoded) */
        aasIds?: string[];
        /** @description The Submodels' unique ids (UTF8-BASE64-URL-encoded) */
        submodelIds?: string[];
        /** @description Include Concept Descriptions? */
        includeConceptDescriptions?: boolean;
      };
    };
    responses: {
      /** @description Requested serialization based on SerializationFormat */
      200: {
        content: {
          "application/asset-administration-shell-package+xml": string;
          "application/json": components["schemas"]["Environment"];
          "application/xml": components["schemas"]["Environment"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns the self-describing information of a network resource (ServiceDescription) */
  GetDescription: {
    responses: {
      /** @description Requested Description */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceDescription"];
        };
      };
      /** @description Unauthorized, e.g. the server refused the authorization attempt. */
      401: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
}
