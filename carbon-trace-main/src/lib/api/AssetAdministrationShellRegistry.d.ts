/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** WithRequired type helpers */
type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };

export interface paths {
  "/shell-descriptors": {
    /** Returns all Asset Administration Shell Descriptors */
    get: operations["GetAllAssetAdministrationShellDescriptors"];
    /** Creates a new Asset Administration Shell Descriptor, i.e. registers an AAS */
    post: operations["PostAssetAdministrationShellDescriptor"];
  };
  "/shell-descriptors/{aasIdentifier}": {
    /** Returns a specific Asset Administration Shell Descriptor */
    get: operations["GetAssetAdministrationShellDescriptorById"];
    /** Updates an existing Asset Administration Shell Descriptor */
    put: operations["PutAssetAdministrationShellDescriptorById"];
    /** Deletes an Asset Administration Shell Descriptor, i.e. de-registers an AAS */
    delete: operations["DeleteAssetAdministrationShellDescriptorById"];
  };
  "/shell-descriptors/{aasIdentifier}/submodel-descriptors": {
    /** Returns all Submodel Descriptors */
    get: operations["GetAllSubmodelDescriptorsThroughSuperpath"];
    /** Creates a new Submodel Descriptor, i.e. registers a submodel */
    post: operations["PostSubmodelDescriptor-ThroughSuperpath"];
  };
  "/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}": {
    /** Returns a specific Submodel Descriptor */
    get: operations["GetSubmodelDescriptorByIdThroughSuperpath"];
    /** Updates an existing Submodel Descriptor */
    put: operations["PutSubmodelDescriptorByIdThroughSuperpath"];
    /** Deletes a Submodel Descriptor, i.e. de-registers a submodel */
    delete: operations["DeleteSubmodelDescriptorByIdThroughSuperpath"];
  };
  "/description": {
    /** Returns the self-describing information of a network resource (ServiceDescription) */
    get: operations["GetDescription"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @enum {string} */
    AssetKind: "Instance" | "NotApplicable" | "Type";
    GetAssetAdministrationShellDescriptorsResult: components["schemas"]["PagedResult"] & {
      result?: components["schemas"]["AssetAdministrationShellDescriptor"][];
    };
    PagedResult: {
      paging_metadata?: components["schemas"]["PagedResult_paging_metadata"];
    };
    /** @example { "id": "https://example.org/aas/motor", "endpoints": [ { "protocolInformation": { "endpointAddress": "https://localhost:1234", "endpointProtocolVersion": "1.1" }, "interface": "AAS-1.0" }, { "protocolInformation": { "endpointAddress": "opc.tcp://localhost:4840" }, "interface": "AAS-1.0" }, { "protocolInformation": { "endpointAddress": "https://localhost:5678", "endpointProtocolVersion": "1.1", "subprotocol": "OPC UA Basic SOAP", "subprotocolBody": "ns=2;s=MyAAS", "subprotocolBodyEncoding": "application/soap+xml" }, "interface": "AAS-1.0" } ] } */
    AssetAdministrationShellDescriptor: WithRequired<components["schemas"]["Descriptor"] & {
      administration?: components["schemas"]["AdministrativeInformation"];
      assetKind?: components["schemas"]["AssetKind"];
      assetType?: string;
      endpoints?: components["schemas"]["Endpoint"][];
      globalAssetId?: string;
      idShort?: string;
      id?: string;
      specificAssetIds?: components["schemas"]["SpecificAssetId"][];
      submodelDescriptors?: components["schemas"]["SubmodelDescriptor"][];
    }, "id">;
    /** @example { "endpoints": [ { "protocolInformation": { "endpointAddress": "https://localhost:1234", "endpointProtocolVersion": "1.1" }, "interface": "AAS-1.0" }, { "protocolInformation": { "endpointAddress": "opc.tcp://localhost:4840" }, "interface": "AAS-1.0" }, { "protocolInformation": { "endpointAddress": "https://localhost:5678", "endpointProtocolVersion": "1.1", "subprotocol": "OPC UA Basic SOAP", "subprotocolBody": "ns=2;s=MyAAS", "subprotocolBodyEncoding": "application/soap+xml" }, "interface": "AAS-1.0" } ] } */
    Descriptor: {
      description?: components["schemas"]["LangStringTextType"][];
      displayName?: components["schemas"]["LangStringNameType"][];
      extensions?: components["schemas"]["Extension"][];
    };
    LangStringTextType: components["schemas"]["AbstractLangString"] & {
      text?: unknown;
    };
    AbstractLangString: {
      language: string;
      text: string;
    };
    LangStringNameType: components["schemas"]["AbstractLangString"] & {
      text?: unknown;
    };
    Extension: components["schemas"]["HasSemantics"] & {
      name: string;
      valueType?: components["schemas"]["DataTypeDefXsd"];
      value?: string;
      refersTo?: components["schemas"]["Reference"][];
    };
    HasSemantics: {
      semanticId?: components["schemas"]["Reference"];
      supplementalSemanticIds?: components["schemas"]["Reference"][];
    };
    Reference: components["schemas"]["ReferenceParent"] & {
      referredSemanticId?: components["schemas"]["ReferenceParent"];
    };
    ReferenceParent: {
      type: components["schemas"]["ReferenceTypes"];
      keys: components["schemas"]["Key"][];
    };
    /** @enum {string} */
    ReferenceTypes: "ExternalReference" | "ModelReference";
    Key: {
      type: components["schemas"]["KeyTypes"];
      value: string;
    };
    /** @enum {string} */
    KeyTypes: "AnnotatedRelationshipElement" | "AssetAdministrationShell" | "BasicEventElement" | "Blob" | "Capability" | "ConceptDescription" | "DataElement" | "Entity" | "EventElement" | "File" | "FragmentReference" | "GlobalReference" | "Identifiable" | "MultiLanguageProperty" | "Operation" | "Property" | "Range" | "Referable" | "ReferenceElement" | "RelationshipElement" | "Submodel" | "SubmodelElement" | "SubmodelElementCollection" | "SubmodelElementList";
    /** @enum {string} */
    DataTypeDefXsd: "xs:anyURI" | "xs:base64Binary" | "xs:boolean" | "xs:byte" | "xs:date" | "xs:dateTime" | "xs:decimal" | "xs:double" | "xs:duration" | "xs:float" | "xs:gDay" | "xs:gMonth" | "xs:gMonthDay" | "xs:gYear" | "xs:gYearMonth" | "xs:hexBinary" | "xs:int" | "xs:integer" | "xs:long" | "xs:negativeInteger" | "xs:nonNegativeInteger" | "xs:nonPositiveInteger" | "xs:positiveInteger" | "xs:short" | "xs:string" | "xs:time" | "xs:unsignedByte" | "xs:unsignedInt" | "xs:unsignedLong" | "xs:unsignedShort";
    AdministrativeInformation: components["schemas"]["HasDataSpecification"] & {
      version?: string;
      revision?: string;
      creator?: components["schemas"]["Reference"];
      templateId?: string;
    };
    HasDataSpecification: {
      embeddedDataSpecifications?: components["schemas"]["EmbeddedDataSpecification"][];
    };
    EmbeddedDataSpecification: {
      dataSpecification: components["schemas"]["Reference"];
      dataSpecificationContent: components["schemas"]["DataSpecificationContent_choice"];
    };
    DataSpecificationContent_choice: components["schemas"]["DataSpecificationIec61360"];
    DataSpecificationIec61360: components["schemas"]["DataSpecificationContent"] & {
      preferredName: components["schemas"]["LangStringPreferredNameTypeIec61360"][];
      shortName?: components["schemas"]["LangStringShortNameTypeIec61360"][];
      unit?: string;
      unitId?: components["schemas"]["Reference"];
      sourceOfDefinition?: string;
      symbol?: string;
      dataType?: components["schemas"]["DataTypeIec61360"];
      definition?: components["schemas"]["LangStringDefinitionTypeIec61360"][];
      valueFormat?: string;
      valueList?: components["schemas"]["ValueList"];
      value?: string;
      levelType?: components["schemas"]["LevelType"];
      modelType?: string;
    };
    DataSpecificationContent: {
      modelType: components["schemas"]["ModelType"];
    };
    /** @enum {string} */
    ModelType: "AnnotatedRelationshipElement" | "AssetAdministrationShell" | "BasicEventElement" | "Blob" | "Capability" | "ConceptDescription" | "DataSpecificationIec61360" | "Entity" | "File" | "MultiLanguageProperty" | "Operation" | "Property" | "Range" | "ReferenceElement" | "RelationshipElement" | "Submodel" | "SubmodelElementCollection" | "SubmodelElementList";
    LangStringPreferredNameTypeIec61360: components["schemas"]["AbstractLangString"] & {
      text?: unknown;
    };
    LangStringShortNameTypeIec61360: components["schemas"]["AbstractLangString"] & {
      text?: unknown;
    };
    /** @enum {string} */
    DataTypeIec61360: "BLOB" | "BOOLEAN" | "DATE" | "FILE" | "HTML" | "INTEGER_COUNT" | "INTEGER_CURRENCY" | "INTEGER_MEASURE" | "IRDI" | "IRI" | "RATIONAL" | "RATIONAL_MEASURE" | "REAL_COUNT" | "REAL_CURRENCY" | "REAL_MEASURE" | "STRING" | "STRING_TRANSLATABLE" | "TIME" | "TIMESTAMP";
    LangStringDefinitionTypeIec61360: components["schemas"]["AbstractLangString"] & {
      text?: unknown;
    };
    ValueList: {
      valueReferencePairs: components["schemas"]["ValueReferencePair"][];
    };
    ValueReferencePair: {
      value: string;
      valueId: components["schemas"]["Reference"];
    };
    LevelType: {
      min: boolean;
      nom: boolean;
      typ: boolean;
      max: boolean;
    };
    Endpoint: {
      interface: string;
      protocolInformation: components["schemas"]["ProtocolInformation"];
    };
    ProtocolInformation: {
      href: string;
      endpointProtocol?: string;
      endpointProtocolVersion?: string[];
      subprotocol?: string;
      subprotocolBody?: string;
      subprotocolBodyEncoding?: string;
      securityAttributes?: components["schemas"]["ProtocolInformation_securityAttributes"][];
    };
    SpecificAssetId: components["schemas"]["HasSemantics"] & {
      name: string;
      value: string;
      externalSubjectId?: components["schemas"]["Reference"];
    };
    /** @example { "id": "https://admin-shell.io/zvei/nameplate/1/0/Nameplate", "endpoints": [ { "protocolInformation": { "endpointAddress": "https://localhost:1234", "endpointProtocolVersion": "1.1" }, "interface": "AAS-1.0" }, { "protocolInformation": { "endpointAddress": "opc.tcp://localhost:4840" }, "interface": "AAS-1.0" }, { "protocolInformation": { "endpointAddress": "https://localhost:5678", "endpointProtocolVersion": "1.1", "subprotocol": "OPC UA Basic SOAP", "subprotocolBody": "ns=2;s=MyAAS", "subprotocolBodyEncoding": "application/soap+xml" }, "interface": "AAS-1.0" } ] } */
    SubmodelDescriptor: WithRequired<{
      administration?: components["schemas"]["AdministrativeInformation"];
      endpoints: components["schemas"]["Endpoint"][];
      idShort?: string;
      id: string;
      semanticId?: components["schemas"]["Reference"];
      supplementalSemanticId?: components["schemas"]["Reference"][];
    } & components["schemas"]["Descriptor"], "endpoints" | "id">;
    Result: {
      messages?: components["schemas"]["Message"][];
    };
    Message: {
      code?: string;
      correlationId?: string;
      /** @enum {string} */
      messageType?: "Undefined" | "Info" | "Warning" | "Error" | "Exception";
      text?: string;
      timestamp?: string;
    };
    GetSubmodelDescriptorsResult: components["schemas"]["PagedResult"] & {
      result?: components["schemas"]["SubmodelDescriptor"][];
    };
    /**
     * @description The Description object enables servers to present their capabilities to the clients, in particular which profiles they implement. At least one defined profile is required. Additional, proprietary attributes might be included. Nevertheless, the server must not expect that a regular client understands them.
     * @example {
     *   "profiles": [
     *     "RepositoryServiceSpecification/V3.0-MinimalProfile",
     *     "RegistryServiceSpecification/V3.0"
     *   ]
     * }
     */
    ServiceDescription: {
      profiles?: ("AssetAdministrationShellServiceSpecification/V3.0" | "AssetAdministrationShellServiceSpecification/V3.0-MinimalProfile" | "SubmodelServiceSpecification/V3.0" | "SubmodelServiceSpecification/V3.0-ValueProfile" | "SubmodelServiceSpecification/V3.0-MinimalProfile" | "AasxFileServerServiceSpecification/V3.0" | "RegistryServiceSpecification/V3.0" | "RegistryServiceSpecification/V3.0- AssetAdministrationShellRegistry" | "RegistryServiceSpecification/V3.0-SubmodelRegistry" | "RepositoryServiceSpecification/V3.0" | "RepositoryServiceSpecification/V3.0-MinimalProfile" | "AssetAdministrationShellRepositoryServiceSpecification/V3.0" | "AssetAdministrationShellRepositoryServiceSpecification/V3.0-MinimalProfile" | "SubmodelRepositoryServiceSpecification/V3.0" | "SubmodelRepositoryServiceSpecification/V3.0-MinimalProfile" | "RegistryAndDiscoveryServiceSpecification/V3.0")[];
    };
    PagedResult_paging_metadata: {
      /** @example wJlCDLIl6KTWypN7T6vc6nWEmEYe99Hjf1XY1xmqV-M=# */
      cursor?: string;
    };
    ProtocolInformation_securityAttributes: {
      /** @enum {string} */
      type: "NONE" | "RFC_TLSA" | "W3C_DID";
      key: string;
      value: string;
    };
  };
  responses: {
    /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
    "bad-request": {
      content: {
        "application/json": components["schemas"]["Result"];
      };
    };
    /** @description Forbidden */
    forbidden: {
      content: {
        "application/json": components["schemas"]["Result"];
      };
    };
    /** @description Internal Server Error */
    "internal-server-error": {
      content: {
        "application/json": components["schemas"]["Result"];
      };
    };
    /** @description Default error handling for unmentioned status codes */
    default: {
      content: {
        "application/json": components["schemas"]["Result"];
      };
    };
    /** @description Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request. */
    conflict: {
      content: {
        "application/json": components["schemas"]["Result"];
      };
    };
    /** @description Not Found */
    "not-found": {
      content: {
        "application/json": components["schemas"]["Result"];
      };
    };
  };
  parameters: {
    /** @description The maximum number of elements in the response array */
    Limit?: number;
    /** @description A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue */
    Cursor?: string;
    /** @description The Asset's kind (Instance or Type) */
    AssetKind?: components["schemas"]["AssetKind"];
    /** @description The Asset's type (UTF8-BASE64-URL-encoded) */
    AssetType?: string;
    /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
    AssetAdministrationShellIdentifier: string;
    /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
    SubmodelIdentifier: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Returns all Asset Administration Shell Descriptors */
  GetAllAssetAdministrationShellDescriptors: {
    parameters: {
      query?: {
        /** @description The maximum number of elements in the response array */
        limit?: number;
        /** @description A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue */
        cursor?: string;
        /** @description The Asset's kind (Instance or Type) */
        assetKind?: components["schemas"]["AssetKind"];
        /** @description The Asset's type (UTF8-BASE64-URL-encoded) */
        assetType?: string;
      };
    };
    responses: {
      /** @description Requested Asset Administration Shell Descriptors */
      200: {
        content: {
          "application/json": components["schemas"]["GetAssetAdministrationShellDescriptorsResult"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Creates a new Asset Administration Shell Descriptor, i.e. registers an AAS */
  PostAssetAdministrationShellDescriptor: {
    /** @description Asset Administration Shell Descriptor object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetAdministrationShellDescriptor"];
      };
    };
    responses: {
      /** @description Asset Administration Shell Descriptor created successfully */
      201: {
        content: {
          "application/json": components["schemas"]["AssetAdministrationShellDescriptor"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request. */
      409: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns a specific Asset Administration Shell Descriptor */
  GetAssetAdministrationShellDescriptorById: {
    parameters: {
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
      };
    };
    responses: {
      /** @description Requested Asset Administration Shell Descriptor */
      200: {
        content: {
          "application/json": components["schemas"]["AssetAdministrationShellDescriptor"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Updates an existing Asset Administration Shell Descriptor */
  PutAssetAdministrationShellDescriptorById: {
    parameters: {
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
      };
    };
    /** @description Asset Administration Shell Descriptor object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetAdministrationShellDescriptor"];
      };
    };
    responses: {
      /** @description Asset Administration Shell Descriptor updated successfully */
      204: {
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Deletes an Asset Administration Shell Descriptor, i.e. de-registers an AAS */
  DeleteAssetAdministrationShellDescriptorById: {
    parameters: {
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
      };
    };
    responses: {
      /** @description Asset Administration Shell Descriptor deleted successfully */
      204: {
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns all Submodel Descriptors */
  GetAllSubmodelDescriptorsThroughSuperpath: {
    parameters: {
      query?: {
        /** @description The maximum number of elements in the response array */
        limit?: number;
        /** @description A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue */
        cursor?: string;
      };
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
      };
    };
    responses: {
      /** @description Requested Submodel Descriptors */
      200: {
        content: {
          "application/json": components["schemas"]["GetSubmodelDescriptorsResult"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Creates a new Submodel Descriptor, i.e. registers a submodel */
  "PostSubmodelDescriptor-ThroughSuperpath": {
    parameters: {
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
      };
    };
    /** @description Submodel Descriptor object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubmodelDescriptor"];
      };
    };
    responses: {
      /** @description Submodel Descriptor created successfully */
      201: {
        content: {
          "application/json": components["schemas"]["SubmodelDescriptor"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request. */
      409: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns a specific Submodel Descriptor */
  GetSubmodelDescriptorByIdThroughSuperpath: {
    parameters: {
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    responses: {
      /** @description Requested Submodel Descriptor */
      200: {
        content: {
          "application/json": components["schemas"]["SubmodelDescriptor"];
        };
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Updates an existing Submodel Descriptor */
  PutSubmodelDescriptorByIdThroughSuperpath: {
    parameters: {
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    /** @description Submodel Descriptor object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubmodelDescriptor"];
      };
    };
    responses: {
      /** @description Submodel Descriptor updated successfully */
      204: {
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Deletes a Submodel Descriptor, i.e. de-registers a submodel */
  DeleteSubmodelDescriptorByIdThroughSuperpath: {
    parameters: {
      path: {
        /** @description The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) */
        aasIdentifier: string;
        /** @description The Submodel’s unique id (UTF8-BASE64-URL-encoded) */
        submodelIdentifier: string;
      };
    };
    responses: {
      /** @description Submodel Descriptor deleted successfully */
      204: {
        content: never;
      };
      /** @description Bad Request, e.g. the request parameters of the format of the request body is wrong. */
      400: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
  /** Returns the self-describing information of a network resource (ServiceDescription) */
  GetDescription: {
    responses: {
      /** @description Requested Description */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceDescription"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
      /** @description Default error handling for unmentioned status codes */
      default: {
        content: {
          "application/json": components["schemas"]["Result"];
        };
      };
    };
  };
}
